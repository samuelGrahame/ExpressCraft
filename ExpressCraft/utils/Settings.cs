using Bridge;
using static Retyped.dom;
using System;
using System.Collections.Generic;

namespace ExpressCraft
{
    public static class Settings
    {
        public static string NetworkURL = "Host.ashx";
        public static string ResourceURL = "./images/";
        public static bool AutoRender = true;
        public const string Font = "8.25pt \"Tahoma\"";
        //public const string Font = "8.25pt Tahoma";//Consolas
        public static decimal TaxPercent { get; set; } = 0.1m;
        public static bool AlignFormToGrid = false;
        public static int AlignmentForForm = 0;
        public static string DefaultFont = Font;

        private static HTMLStyleElement darkStyle = null;

        private static bool _darkStyleEnabled;

        public static bool DarkStyleEnabled
        {
            get { return _darkStyleEnabled; }
            set { 
                if(value != _darkStyleEnabled)
                {
                    _darkStyleEnabled = value;
                    if(_darkStyleEnabled)
                    {
                        darkStyle = new HTMLStyleElement();
                        darkStyle.innerHTML = @"
.heading {
    background-color: rgb(178, 178, 178);
    border-right: 1px solid rgb(68, 68, 68) !important;
}

.control {
    color: rgb(64, 64, 64);    
    scrollbar-color: dark !important;
}

.form-heading, .ribbonbutton, .ribboncontrol, .ribbongroup, .ribbonpage {
    background-color: rgb(68, 68, 68);
}

.form-heading-title {
    color: rgb(254, 254, 254);
}

.form-heading-button {
    color: rgb(254, 254, 254);
}

.form-heading-button:hover {
    background-color: rgb(55, 55, 55) !important;
    color: white !important;
}

.form-heading-button:active:hover {
    background-color: rgb(35, 35, 35) !important;
    color: white !important;
}

:root {
  --primary: rgb(68, 68, 68);
}

@keyframes ColorFlash {
	from {
		color: rgb(254, 254, 254) !important;
        background-color: rgb(68, 68, 68) !important;
	}
	to {
		color: rgb(159, 159, 159) !important;
        background-color: rgb(68, 68, 68) !important; 
	}
}

.grid {
    border: unset !important;
}

.cellrow {
    background-color: rgb(211, 211, 211) !important; 
}

.even {
    background-color: rgb(200, 200, 200) !important; 
}

.cellrow-selected, .focusedrow:hover {
    outline: rgb(125, 125, 125) solid 1px!important;
    background-color: rgb(186, 186, 186) !important; 
}

.cellrow:hover {    
    background-color: rgb(180, 180, 180) !important; 
}

";

                        document.body.appendChild(darkStyle);
                    }
                    else
                    {
                        if(darkStyle != null)
                        {
                            document.body.removeChild(darkStyle);
                            darkStyle = null;
                        }
                    }
                }                
            }
        }


        /// <summary>
        /// Only for firefox - as no error with number input
        /// </summary>
        public static bool OnFocusSelectAll = true;

        public static StyleSheet DefaultStyleSheet;
        public static StyleSheet PluginStyleSheet;
        internal static List<StyleSheet> resourceManangerSheets = new List<StyleSheet>();

        public static bool GridViewAutoColumnGenerateFormatAsDate = false;
        public static bool GridViewAutoColumnFormatDates = true;
        public static bool GridViewBlurOnScroll = false;
        public static int GridViewRowScrollPadding = 0;

        public static bool GridViewScrollDelayed = false;
        public static int GridViewScrollDelayMS = 25;

        public static int ContextMenuStartingZIndex = 500;
        public static int ContextMenuMinWidth = 200;

        public static int MessageFormTextMaximumHeightInPx = 500;
        public static int MessageFormTextMinimumHeightInPx = 32;
        public static int MessageFormMinimumWidthInPx = 195;

        public static DatePosition DayPosition = DatePosition.First;
        public static DatePosition MonthPosition = DatePosition.Second;
        public static DatePosition YearPosition = DatePosition.Third;

        public static bool DisableTextPopupEditor = false;

        public static string ExpressCraftCssBase64 = "LmNlbGwsLmNvbnRleHRpdGVtLC5oZWFkaW5nLC5zaW1wbGVidXR0b257dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXB9LmNvbnRyb2wsLmRpc2FibGVkOm5vdCgucmliYm9uYnV0dG9uKXstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lfS5mb3JtLWhlYWRpbmcsLmZvcm0taGVhZGluZy1idXR0b24sLmZvcm0taGVhZGluZy1idXR0b24tY2xvc2UsLmZvcm0taGVhZGluZy1taW57dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4yNXMgZWFzZX0uY29udHJvbHtjb2xvcjojNDA0MDQwO3Bvc2l0aW9uOmFic29sdXRlO3VzZXItc2VsZWN0Om5vbmU7Zm9udDo4LjI1cHQgVGFob21hfS5zZWxlY3Rpb257LW1vei11c2VyLXNlbGVjdDp0ZXh0Oy1tcy11c2VyLXNlbGVjdDp0ZXh0Oy13ZWJraXQtdXNlci1zZWxlY3Q6dGV4dDt1c2VyLXNlbGVjdDp0ZXh0fS5jb250cm9sOmZvY3VzOm5vdCguZ3JpZCk6bm90KC5jb250ZXh0aXRlbSk6bm90KC5jb250ZXh0bWVudSl7Ym9yZGVyOjFweCBzb2xpZCAjMDA3YWNjO2JveC1zaGFkb3c6MCAwIDEwcHggLTJweCByZ2JhKDAsMCwwLC4yNSl9LnJpYmJvbmNvbnRyb2wsLnRhYmNvbnRyb2xwYWdle2JvcmRlci1ib3R0b20tY29sb3I6I0M1QzVDNTtib3JkZXItYm90dG9tLXN0eWxlOnNvbGlkO2JvcmRlci1ib3R0b20td2lkdGg6dGhpbjtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDp0aGluO2JvcmRlci1yaWdodC1zdHlsZTpzb2xpZDtib3JkZXItcmlnaHQtd2lkdGg6dGhpbn0uZGlzYWJsZWQ6bm90KC5yaWJib25idXR0b24pe2N1cnNvcjpub3QtYWxsb3dlZDtmaWx0ZXI6YnJpZ2h0bmVzcyg5MCUpIGdyYXlzY2FsZSgxMDAlKSBjb250cmFzdCg2MCUpIGJyaWdodG5lc3MoMTQwJSkgY29udHJhc3QoNjAlKTt1c2VyLXNlbGVjdDpub25lfS5jb250cm9sOmRpc2FibGVkey1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZC1jb2xvcjojQ0NDO2N1cnNvcjpub3QtYWxsb3dlZDt1c2VyLXNlbGVjdDpub25lfS5pbnB1dGNvbnRyb2w6cmVhZC1vbmx5ey1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6dGV4dDstd2Via2l0LXVzZXItc2VsZWN0OnRleHQ7YmFja2dyb3VuZC1jb2xvcjojRjBGMEYwO3VzZXItc2VsZWN0OnRleHR9LnN5c3RlbS1mb3JtLWNvbGxlY3Rpb24tb3ZlcmxheXtoZWlnaHQ6MTAwJTtvcGFjaXR5Oi41O3dpZHRoOjEwMCV9LmJsdXJ7ZmlsdGVyOmJsdXIoNnB4KX0uYXBwbGljYXRpb24taWNvbntiYWNrZ3JvdW5kLWNvbG9yOiNGMEYwRjA7Ym9yZGVyLXJhZGl1czo1MCU7aGVpZ2h0OjQ4cHg7bGVmdDo0cHg7dG9wOjRweDt3aWR0aDo0OHB4O3otaW5kZXg6MTAwMDB9LmFwcGxpY2F0aW9uLWljb246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5hcHBsaWNhdGlvbi1pY29uOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNDQ0UzRjR9LmZhdi1pY29ue2hlaWdodDozMnB4O2xlZnQ6OHB4O3RvcDo4cHg7d2lkdGg6MzJweDt6LWluZGV4OjEwMDAwfS5yaWJib25jb250cm9se2hlaWdodDoxNTRweDtsZWZ0OjA7dG9wOjA7d2lkdGg6Y2FsYygxMDAlIC0gMnB4KX0ucmliYm9uY29udHJvbC1jb21wYWN0e2hlaWdodDoxMjhweCFpbXBvcnRhbnR9LnJpYmJvbnBhZ2V7aGVpZ2h0OjEwMHB4O2xlZnQ6MDtvdmVyZmxvdy14OmF1dG87b3ZlcmZsb3cteTpoaWRkZW47dG9wOjU0cHg7d2lkdGg6MTAwJX0ucmliYm9ucGFnZS1jb21wYWN0e3RvcDoyOHB4IWltcG9ydGFudH0ucmliYm9uZ3JvdXB7aGVpZ2h0OjEwMCU7bGVmdDowfS5yaWJib25idXR0b257Y3Vyc29yOnBvaW50ZXI7aGVpZ2h0OjY4cHg7dG9wOjNweH0ucmliYm9uYnV0dG9uY2FwdGlvbntib3R0b206MDtsZWZ0OjA7dGV4dC1hbGlnbjpjZW50ZXI7dG9wOjQxcHg7d2lkdGg6MTAwJX0ucmliYm9uYnV0dG9uaWNvbntoZWlnaHQ6MzJweDtsZWZ0OmNhbGMoNTAlIC0gMTZweCk7dG9wOjNweDt3aWR0aDozMnB4fS5yaWJib25idXR0b25zbWFsbHtjdXJzb3I6cG9pbnRlcjtoZWlnaHQ6MjJweH0ucmliYm9uYnV0dG9uc21hbGxjYXB0aW9ue2JvdHRvbTowO2hlaWdodDpjYWxjKDEwMCUgLSA2cHgpO2xpbmUtaGVpZ2h0OjE5cHg7dGV4dC1hbGlnbjpsZWZ0O3RvcDowfS5yaWJib25idXR0b25zbWFsbGljb257aGVpZ2h0OjE2cHg7bGVmdDo2cHg7dG9wOjNweDt3aWR0aDoxNnB4fS5yaWJib25zZXBlcmF0b3J7YmFja2dyb3VuZC1jb2xvcjojQzVDNUM1O2hlaWdodDo1OHB4O3RvcDo4cHg7d2lkdGg6MXB4fS5yaWJib25ncm91cGNhcHRpb257Ym90dG9tOjA7bGVmdDowO3RleHQtYWxpZ246Y2VudGVyO3RvcDo3N3B4O3dpZHRoOjEwMCV9LnJpYmJvbnBhZ2VoZWFkZXJ7aGVpZ2h0OjIzcHg7bGluZS1oZWlnaHQ6MjJweDt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6MjlweH0ucmliYm9ucGFnZWhlYWRlci1jb21wYWN0e3RvcDo0cHghaW1wb3J0YW50fS50YWJjb250cm9scGFnZXtib3JkZXItbGVmdC1jb2xvcjojQzVDNUM1O2JvcmRlci1yaWdodC1jb2xvcjojQzVDNUM1O2hlaWdodDpjYWxjKDEwMCUgLSAyNnB4KTtsZWZ0OjA7b3ZlcmZsb3c6YXV0bzt0b3A6MjVweDt3aWR0aDpjYWxjKDEwMCUgLSAycHgpfS50YWJjb250cm9scGFnZWhlYWRlcntoZWlnaHQ6MjFweDtsaW5lLWhlaWdodDoyMnB4O3RleHQtYWxpZ246Y2VudGVyO3RvcDowfS50YWJjb250cm9scGFnZWhlYWRlci1oaWRkZW57Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDp0aGluO2N1cnNvcjpwb2ludGVyfS50YWJjb250cm9scGFnZWhlYWRlci1jbG9zZWJ1dHRvbntib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2NvbG9yOiNDNUM1QzU7aGVpZ2h0OjEycHg7bGluZS1oZWlnaHQ6MTJweDtyaWdodDozcHg7dG9wOjRweDt3aWR0aDoxMnB4fS50YWJjb250cm9scGFnZWhlYWRlci1jbG9zZWJ1dHRvbjphZnRlcntjb250ZW50OidYJ30uaW5wdXRjb250cm9sey1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0OnRleHQ7Ym9yZGVyOjFweCBzb2xpZCAjQzVDNUM1O2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjE4cHg7bWFyZ2luOjA7dGV4dC1pbmRlbnQ6M3B4O3VzZXItc2VsZWN0OnRleHR9LmRyb3Bkb3due2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBa0FBQUFGQ0FZQUFBQ1hVOFpyQUFBQUNYQklXWE1BQUE3REFBQU93d0hIYjZoa0FBQUtUMmxEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBSGphblZOblZGUHBGajMzM3ZSQ1M0aUFsRXR2VWhVSUlGSkNpNEFVa1NZcUlRa1FTb2dob2RrVlVjRVJSVVVFRzhpZ2lBT09qb0NNRlZFc0RJb0syQWZrSWFLT2c2T0lpc3I3NFh1amE5YTg5K2JOL3JYWFB1ZXM4NTJ6endmQUNBeVdTRE5STllBTXFVSWVFZUNEeDhURzRlUXVRSUVLSkhBQUVBaXpaQ0Z6L1NNQkFQaCtQRHdySXNBSHZnQUJlTk1MQ0FEQVRadkFNQnlIL3cvcVFwbGNBWUNFQWNCMGtUaExDSUFVQUVCNmprS21BRUJHQVlDZG1DWlRBS0FFQUdETFkyTGpBRkF0QUdBbmYrYlRBSUNkK0psN0FRQmJsQ0VWQWFDUkFDQVRaWWhFQUdnN0FLelBWb3BGQUZnd0FCUm1TOFE1QU5ndEFEQkpWMlpJQUxDM0FNRE9FQXV5QUFnTUFEQlJpSVVwQUFSN0FHRElJeU40QUlTWkFCUkc4bGM4OFN1dUVPY3FBQUI0bWJJOHVTUTVSWUZiQ0MxeEIxZFhMaDRvemtrWEt4UTJZUUpobWtBdXdubVpHVEtCTkEvZzg4d0FBS0NSRlJIZ2cvUDllTTRPcnM3T05vNjJEbDh0NnI4Ry95SmlZdVArNWMrcmNFQUFBT0YwZnRIK0xDK3pHb0E3Qm9CdC9xSWw3Z1JvWGd1Z2RmZUxacklQUUxVQW9PbmFWL053K0g0OFBFV2hrTG5aMmVYazVOaEt4RUpiWWNwWGZmNW53bC9BVi8xcytYNDgvUGYxNEw3aUpJRXlYWUZIQlBqZ3dzejBUS1VjejVJSmhHTGM1bzlIL0xjTC8vd2QweUxFU1dLNVdDb1U0MUVTY1k1RW1venpNcVVpaVVLU0tjVWwwdjlrNHQ4cyt3TSszelVBc0dvK0FYdVJMYWhkWXdQMlN5Y1FXSFRBNHZjQUFQSzdiOEhVS0FnRGdHaUQ0YzkzLys4Ly9VZWdKUUNBWmttU2NRQUFYa1FrTGxUS3N6L0hDQUFBUktDQktyQkJHL1RCR0N6QUJoekJCZHpCQy94Z05vUkNKTVRDUWhCQ0NtU0FISEpnS2F5Q1FpaUd6YkFkS21BdjFFQWROTUJSYUlhVGNBNHV3bFc0RGoxd0QvcGhDSjdCS0x5QkNRUkJ5QWdUWVNIYWlBRmlpbGdqamdnWG1ZWDRJY0ZJQkJLTEpDREppQlJSSWt1Uk5VZ3hVb3BVSUZWSUhmSTljZ0k1aDF4R3VwRTd5QUF5Z3Z5R3ZFY3hsSUd5VVQzVURMVkR1YWczR29SR29ndlFaSFF4bW84V29KdlFjclFhUFl3Mm9lZlFxMmdQMm84K1E4Y3d3T2dZQnpQRWJEQXV4c05Dc1Rnc0NaTmp5N0VpckF5cnhocXdWcXdEdTRuMVk4K3hkd1FTZ1VYQUNUWUVkMElnWVI1QlNGaE1XRTdZU0tnZ0hDUTBFZG9KTndrRGhGSENKeUtUcUV1MEpyb1IrY1FZWWpJeGgxaElMQ1BXRW84VEx4QjdpRVBFTnlRU2lVTXlKN21RQWtteHBGVFNFdEpHMG01U0kra3NxWnMwU0Jvams4bmFaR3V5QnptVUxDQXJ5SVhrbmVURDVEUGtHK1FoOGxzS25XSkFjYVQ0VStJb1VzcHFTaG5sRU9VMDVRWmxtREpCVmFPYVV0Mm9vVlFSTlk5YVFxMmh0bEt2VVllb0V6UjFtam5OZ3haSlM2V3RvcFhUR21nWGFQZHByK2gwdWhIZGxSNU9sOUJYMHN2cFIraVg2QVAwZHd3TmhoV0R4NGhuS0JtYkdBY1laeGwzR0srWVRLWVowNHNaeDFRd056SHJtT2VaRDVsdlZWZ3F0aXA4RlpIS0NwVktsU2FWR3lvdlZLbXFwcXJlcWd0VjgxWExWSStwWGxOOXJrWlZNMVBqcVFuVWxxdFZxcDFRNjFNYlUyZXBPNmlIcW1lb2IxUS9wSDVaL1lrR1djTk13MDlEcEZHZ3NWL2p2TVlnQzJNWnMzZ3NJV3NOcTRaMWdUWEVKckhOMlh4MktydVkvUjI3aXoycXFhRTVRek5LTTFlelV2T1VaajhINDVoeCtKeDBUZ25uS0tlWDgzNkszaFR2S2VJcEc2WTBUTGt4WlZ4cnFwYVhsbGlyU0t0UnEwZnJ2VGF1N2FlZHByMUZ1MW43Z1E1Qngwb25YQ2RIWjQvT0JaM25VOWxUM2FjS3B4Wk5QVHIxcmk2cWE2VWJvYnRFZDc5dXArNllucjVlZ0o1TWI2ZmVlYjNuK2h4OUwvMVUvVzM2cC9WSERGZ0dzd3drQnRzTXpoZzh4VFZ4Ynp3ZEw4ZmI4VkZEWGNOQVE2VmhsV0dYNFlTUnVkRThvOVZHalVZUGpHbkdYT01rNDIzR2JjYWpKZ1ltSVNaTFRlcE43cHBTVGJtbUthWTdURHRNeDgzTXphTE4xcGsxbXoweDF6TG5tK2ViMTV2ZnQyQmFlRm9zdHFpMnVHVkpzdVJhcGxudXRyeHVoVm81V2FWWVZWcGRzMGF0bmEwbDFydXR1NmNScDdsT2swNnJudFpudzdEeHRzbTJxYmNac09YWUJ0dXV0bTIyZldGblloZG50OFd1dys2VHZaTjl1bjJOL1QwSERZZlpEcXNkV2gxK2M3UnlGRHBXT3Q2YXpwenVQMzNGOUpicEwyZFl6eERQMkRQanRoUExLY1JwblZPYjAwZG5GMmU1YzRQemlJdUpTNExMTHBjK0xwc2J4dDNJdmVSS2RQVnhYZUY2MHZXZG03T2J3dTJvMjYvdU51NXA3b2Zjbjh3MG55bWVXVE56ME1QSVErQlI1ZEUvQzUrVk1HdmZySDVQUTArQlo3WG5JeTlqTDVGWHJkZXd0NlYzcXZkaDd4Yys5ajV5bitNKzR6dzMzakxlV1YvTU44QzN5TGZMVDhOdm5sK0YzME4vSS85ay8zci8wUUNuZ0NVQlp3T0pnVUdCV3dMNytIcDhJYitPUHpyYlpmYXkyZTFCaktDNVFSVkJqNEt0Z3VYQnJTRm95T3lRclNIMzU1ak9rYzVwRG9WUWZ1alcwQWRoNW1HTHczNE1KNFdIaFZlR1A0NXdpRmdhMFRHWE5YZlIzRU56MzBUNlJKWkUzcHRuTVU4NXJ5MUtOU28rcWk1cVBObzN1alM2UDhZdVpsbk0xVmlkV0Vsc1N4dzVMaXF1Tm01c3Z0Lzg3Zk9INHAzaUMrTjdGNWd2eUYxd2VhSE93dlNGcHhhcExoSXNPcFpBVEloT09KVHdRUkFxcUJhTUpmSVRkeVdPQ25uQ0hjSm5JaS9STnRHSTJFTmNLaDVPOGtncVRYcVM3Skc4Tlhra3hUT2xMT1c1aENlcGtMeE1EVXpkbXpxZUZwcDJJRzB5UFRxOU1ZT1NrWkJ4UXFvaFRaTzJaK3BuNW1aMnk2eGxoYkwreFc2THR5OGVsUWZKYTdPUXJBVlpMUXEyUXFib1ZGb28xeW9Ic21kbFYyYS96WW5LT1phcm5pdk43Y3l6eXR1UU41enZuLy90RXNJUzRaSzJwWVpMVnkwZFdPYTlyR281c2p4eGVkc0s0eFVGSzRaV0Jxdzh1SXEyS20zVlQ2dnRWNWV1ZnIwbWVrMXJnVjdCeW9MQnRRRnI2d3RWQ3VXRmZldmMxKzFkVDFndldkKzFZZnFHblJzK0ZZbUtyaFRiRjVjVmY5Z28zSGpsRzRkdnlyK1ozSlMwcWF2RXVXVFBadEptNmViZUxaNWJEcGFxbCthWERtNE4yZHEwRGQ5V3RPMzE5a1hiTDVmTktOdTdnN1pEdWFPL1BMaThaYWZKenMwN1AxU2tWUFJVK2xRMjd0TGR0V0hYK0c3UjdodDd2UFkwN05YYlc3ejMvVDdKdnR0VkFWVk4xV2JWWmZ0Sis3UDNQNjZKcXVuNGx2dHRYYTFPYlhIdHh3UFNBLzBISXc2MjE3blUxUjNTUFZSU2o5WXI2MGNPeHgrKy9wM3ZkeTBOTmcxVmpaekc0aU53UkhuazZmY0ozL2NlRFRyYWRveDdyT0VIMHg5MkhXY2RMMnBDbXZLYVJwdFRtdnRiWWx1NlQ4dyswZGJxM25yOFI5c2ZENXcwUEZsNVN2TlV5V25hNllMVGsyZnl6NHlkbFoxOWZpNzUzR0Rib3JaNzUyUE8zMm9QYisrNkVIVGgwa1gvaStjN3ZEdk9YUEs0ZFBLeTIrVVRWN2hYbXE4NlgyM3FkT284L3BQVFQ4ZTduTHVhcnJsY2E3bnVlcjIxZTJiMzZSdWVOODdkOUwxNThSYi8xdFdlT1QzZHZmTjZiL2ZGOS9YZkZ0MStjaWY5enN1NzJYY243cTI4VDd4ZjlFRHRRZGxEM1lmVlAxdiszTmp2M0g5cXdIZWc4OUhjUi9jR2hZUFAvcEgxanc5REJZK1pqOHVHRFlicm5qZytPVG5pUDNMOTZmeW5RODlrenlhZUYvNmkvc3V1RnhZdmZ2alY2OWZPMFpqUm9aZnlsNU8vYlh5bC9lckE2eG12MjhiQ3hoNit5WGd6TVY3MFZ2dnR3WGZjZHgzdm85OFBUK1I4SUg4by8yajVzZlZUMEtmN2t4bVRrLzhFQTVqei9HTXpMZHNBQUFBZ1kwaFNUUUFBZWlVQUFJQ0RBQUQ1L3dBQWdPa0FBSFV3QUFEcVlBQUFPcGdBQUJkdmtsL0ZSZ0FBQUVWSlJFRlVlTnAweXNFTndEQU1RbEdjM2RpQUdid2NJM2c0ZWtyVlZnMFNsNjlYdGpNek9JMGtscVFpZVFTU2FnSEFIOXdBQUpEa3Z1MTBkMnpuMlY5b3cyKzdCZ0Q1RUVJOTRYcDAzUUFBQUFCSlJVNUVya0pnZ2c9PScpIHJpZ2h0IDNweCBjZW50ZXIgbm8tcmVwZWF0fS5zaW1wbGVidXR0b257Ym9yZGVyOjFweCBzb2xpZCAjQTZBNkE2O2N1cnNvcjpwb2ludGVyO292ZXJmbG93OmhpZGRlbn0uZm9ybS1tYW5hZ2VyLXN0YXJ0e2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFEQUFBQUFvQ0FJQUFBQTM1ZTRtQUFBQUFYTlNSMElBcnM0YzZRQUFBQVJuUVUxQkFBQ3hqd3Y4WVFVQUFBQUpjRWhaY3dBQURzTUFBQTdEQWNkdnFHUUFBQUNTU1VSQlZGaEg3ZGJSQ1lBZ0ZJWGhSbkFTTjNBREozR1N1NGdidUlHRDFTVWxlakNPQnBMRStSNE5PVC8wVUp0WkRJTVFCaUVNUWhpRU1BajViNUMxMW5zZlFoQ1JsRkxPZVQvVng5M2VCRG5uZEZ1SFk0dzZyQ2RsdTZsYzZUY2NWSGR1bW9lWGNxc2ZneEFHSWNOQnMvR1ZJUXhDR0lRTUI2bTFQcTVQdnZ6OW1JcEJDSU1RQmlFTVFoaUVMQlprekFHb1JZLzFhOFlPdlFBQUFBQkpSVTVFcmtKZ2dnPT0nKSBuby1yZXBlYXQ7Zm9udC1zaXplOjEycHQ7aGVpZ2h0OjQwcHg7bGVmdDowO3RvcDowO3dpZHRoOjQ4cHh9LmZvcm0tbWFuYWdlci1zdGFydDpob3ZlcntiYWNrZ3JvdW5kOnVybCgnZGF0YTppbWFnZS9wbmc7IGJhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBREFBQUFBb0NBSUFBQUEzNWU0bUFBQUFBWE5TUjBJQXJzNGM2UUFBQUFSblFVMUJBQUN4and2OFlRVUFBQUFKY0VoWmN3QUFEc01BQUE3REFjZHZxR1FBQUFDbVNVUkJWRmhIN2RZeENvUXdFSVZoYjVOYXNOQkdaQ3N0QlVGa0w3RGc5dHRxNlFHOGdKMkZCL0kyRGtTMkVPVWxnaGprZlV3VkNmT0RoWHJLTVF4Q0dJUXdDR0VRd2lEa3VVRitHRWRwOGFycTdOT1U3ZkR1cHU4NHk2eVBqWjBKQ3BKTWRzdmkvTmZMWWpuUnUzZEhYekZuSGJUWko3TjcrQjk5eXh5REVBWWgxa0ZYNHl0REdJUXdDTEVPRW01OVhJL2MrZnR4S1FZaERFSVloREFJWVJEaVdKQlNDM2Vkai9ER0l2OC9BQUFBQUVsRlRrU3VRbUNDJykgbm8tcmVwZWF0fS5mb3JtLW1hbmFnZXItc3RhcnQ6YWN0aXZle2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFEQUFBQUFvQ0FJQUFBQTM1ZTRtQUFBQUFYTlNSMElBcnM0YzZRQUFBQVJuUVUxQkFBQ3hqd3Y4WVFVQUFBQUpjRWhaY3dBQURzTUFBQTdEQWNkdnFHUUFBQUNuU1VSQlZGaEhZNUFaWkdEVVFZVEFxSU1JZ1ZFSEVRS2pEaUlFUmgxRUNBeGZCeW5yR0d2YmVodjZKRm5HVnJtVXpuV3ZYUkUyN3pvUVFhV0pCdVE0U04zVUhtZzMwR0xIdklsQWk0RWlFTHV4SW9nVzRnSEpEa0t6RDRpd0NzSVJSQmZ4WU5SQmhNQ29nd2dCa2gxRWF6QWFaWVRBcUlNSWdWRUhFUUlrT3dnSUJsZmxpZ3NNWlBPRHBtRFVRWVRBcUlNSWdWRUhFUUtqRGlJRVJoMUVDQXd5QjhuSUFBREhFSmJETVk0N3JRQUFBQUJKUlU1RXJrSmdnZz09Jykgbm8tcmVwZWF0fS5mb3JtLW1hbmFnZXItc2VhcmNoe2JhY2tncm91bmQtY29sb3I6IzNGM0YzRjtib3JkZXI6bm9uZTtjb2xvcjojMDAwO2ZvbnQ6MTFwdCBTZWdvZSBVSTtoZWlnaHQ6NDBweDtsZWZ0OjQ4cHg7bWFyZ2luOjA7cGFkZGluZzowO3RleHQtaW5kZW50OjEzcHg7dG9wOjA7d2lkdGg6MzQ0cHh9LmNlbGwsLmhlYWRpbmd7dGV4dC1pbmRlbnQ6NHB4fS5mb3JtLW1hbmFnZXItc2VhcmNoOmZvY3Vze2JhY2tncm91bmQtY29sb3I6I0YzRjNGMztvdXRsaW5lOjAhaW1wb3J0YW50fS5mb3JtLW1hbmFnZXItc2VhcmNoOmhvdmVyOm5vdCg6Zm9jdXMpe2JhY2tncm91bmQtY29sb3I6IzU3NTc1N30uZm9ybS1tYW5hZ2VyLXNlYXJjaDpob3Zlcjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOiNGM0YzRjN9LmZvcm0tbWFuYWdlcntiYWNrZ3JvdW5kLWNvbG9yOiMxMDEwMTA7aGVpZ2h0OjQwcHg7bGVmdDowO3RvcDpjYWxjKDEwMCUgLSA0MHB4KTt3aWR0aDoxMDAlfS5mb3JtLWNvbnRhaW5lcntoZWlnaHQ6MTAwJTtsZWZ0OjA7b3ZlcmZsb3c6YXV0bzt0b3A6MDt3aWR0aDoxMDAlO3otaW5kZXg6MH0uY2VsbCwuY29udGV4dGl0ZW0sLmZvcm0tYm9keSwuaGVhZGluZ3tvdmVyZmxvdzpoaWRkZW59LmZvcm0tYmFzZXtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXdpZHRoOjFweDtib3gtc2hhZG93OjAgNXB4IDI1cHggLTRweCByZ2JhKDAsMCwwLC43NSl9LmZvcm0taGVhZGluZy1mbGFzaHthbmltYXRpb24tZGlyZWN0aW9uOmFsdGVybmF0ZS1yZXZlcnNlO2FuaW1hdGlvbi1kdXJhdGlvbjouMDdzO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6ODthbmltYXRpb24tbmFtZTpDb2xvckZsYXNofS5mb3JtLWhlYWRpbmd7aGVpZ2h0OjMwcHg7bWFyZ2luOjA7dmVydGljYWwtYWxpZ246dG9wO3dpZHRoOjEwMCV9LmZvcm0taGVhZGluZy10aXRsZXtmb250LXNpemU6MTBwdDtsZWZ0OjUwJTttYXJnaW4tcmlnaHQ6LTUwJTt0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKX0uZm9ybS1oZWFkaW5nLWJ1dHRvbntib3JkZXItd2lkdGg6MDtjdXJzb3I6aGFuZDtmb250LWZhbWlseTpMdWNpZGEgU2FucyBVbmljb2RlO2ZvbnQtc2l6ZToxMnB0O2hlaWdodDoyOXB4O21hcmdpbjowO3BhZGRpbmc6MDt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6MDt3aWR0aDo0NXB4fS5mb3JtLWJvZHksLmZvcm0tYm9keS1vdmVybGF5e2hlaWdodDpjYWxjKDEwMCUgLSAzMHB4KTt0b3A6MzBweH0uZm9ybS1ib2R5e3dpZHRoOjEwMCV9LmZvcm0tYm9keS1vdmVybGF5e3dpZHRoOjEwMCU7ei1pbmRleDo2NTU1M30uZm9ybS1oZWFkaW5nLWJ1dHRvbi1jbG9zZXtsZWZ0OmNhbGMoMTAwJSAtIDQ1cHgpfS5jZWxse2hlaWdodDoxOXB4IWltcG9ydGFudDtsaW5lLWhlaWdodDoxOXB4O21hcmdpbjowIWltcG9ydGFudH0uY2VsbC1yZXNwb25zaXZle2ZvbnQtc2l6ZToxNHB4O2hlaWdodDo1M3B4IWltcG9ydGFudDtsaW5lLWhlaWdodDo1M3B4fS5mb2N1c2Vkcm93e291dGxpbmU6IzAwMCBkb3R0ZWQgMXB4IWltcG9ydGFudDtvdXRsaW5lLW9mZnNldDotMXB4fS5jb250ZXh0aXRlbSwuY29udGV4dG1lbnUsLmdyaWQ6Zm9jdXN7b3V0bGluZS1zdHlsZTpub25lO2JveC1zaGFkb3c6bm9uZTtib3JkZXItY29sb3I6dHJhbnNwYXJlbnR9LmhlYWRpbmd7Ym9yZGVyLWJvdHRvbTpub25lIWltcG9ydGFudDtib3JkZXItbGVmdDpub25lIWltcG9ydGFudDtib3JkZXItdG9wOm5vbmUhaW1wb3J0YW50O2hlaWdodDoyMXB4IWltcG9ydGFudDtsaW5lLWhlaWdodDoyMXB4O2N1cnNvcjpwb2ludGVyfS5oZWFkaW5nLXJlc3BvbnNpdmV7Zm9udC1zaXplOjE0cHg7aGVpZ2h0OjUzcHghaW1wb3J0YW50O2xpbmUtaGVpZ2h0OjUzcHh9LmdyaWQtc29ydC11cHtiYWNrZ3JvdW5kOnVybCgnZGF0YTppbWFnZS9wbmc7IGJhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQWtBQUFBRkNBWUFBQUNYVThackFBQUFDWEJJV1hNQUFBN0RBQUFPd3dISGI2aGtBQUFLVDJsRFExQlFhRzkwYjNOb2IzQWdTVU5ESUhCeWIyWnBiR1VBQUhqYW5WTm5WRlBwRmozMzN2UkNTNGlBbEV0dlVoVUlJRkpDaTRBVWtTWXFJUWtRU29naG9ka1ZVY0VSUlVVRUc4aWdpQU9Pam9DTUZWRXNESW9LMkFma0lhS09nNk9JaXNyNzRYdWphOWE4OStiTi9yWFhQdWVzODUyenp3ZkFDQXlXU0ROUk5ZQU1xVUllRWVDRHg4VEc0ZVF1UUlFS0pIQUFFQWl6WkNGei9TTUJBUGgrUER3cklzQUh2Z0FCZU5NTENBREFUWnZBTUJ5SC93L3FRcGxjQVlDRUFjQjBrVGhMQ0lBVUFFQjZqa0ttQUVCR0FZQ2RtQ1pUQUtBRUFHRExZMkxqQUZBdEFHQW5mK2JUQUlDZCtKbDdBUUJibENFVkFhQ1JBQ0FUWlloRUFHZzdBS3pQVm9wRkFGZ3dBQlJtUzhRNUFOZ3RBREJKVjJaSUFMQzNBTURPRUF1eUFBZ01BREJSaUlVcEFBUjdBR0RJSXlONEFJU1pBQlJHOGxjODhTdXVFT2NxQUFCNG1iSTh1U1E1UllGYkNDMXhCMWRYTGg0b3pra1hLeFEyWVFKaG1rQXV3bm1aR1RLQk5BL2c4OHdBQUtDUkZSSGdnL1A5ZU00T3JzN09ObzYyRGw4dDZyOEcveUppWXVQKzVjK3JjRUFBQU9GMGZ0SCtMQyt6R29BN0JvQnQvcUlsN2dSb1hndWdkZmVMWnJJUFFMVUFvT25hVi9OdytINDhQRVdoa0xuWjJlWGs1TmhLeEVKYlljcFhmZjVud2wvQVYvMXMrWDQ4L1BmMTRMN2lKSUV5WFlGSEJQamd3c3owVEtVY3o1SUpoR0xjNW85SC9MY0wvL3dkMHlMRVNXSzVXQ29VNDFFU2NZNUVtb3p6TXFVaWlVS1NLY1VsMHY5azR0OHMrd00rM3pVQXNHbytBWHVSTGFoZFl3UDJTeWNRV0hUQTR2Y0FBUEs3YjhIVUtBZ0RnR2lENGM5My8rOC8vVWVnSlFDQVprbVNjUUFBWGtRa0xsVEtzei9IQ0FBQVJLQ0JLckJCRy9UQkdDekFCaHpCQmR6QkMveGdOb1JDSk1UQ1FoQkNDbVNBSEhKZ0theUNRaWlHemJBZEttQXYxRUFkTk1CUmFJYVRjQTR1d2xXNERqMXdEL3BoQ0o3QktMeUJDUVJCeUFnVFlTSGFpQUZpaWxnampnZ1htWVg0SWNGSUJCS0xKQ0RKaUJSUklrdVJOVWd4VW9wVUlGVklIZkk5Y2dJNWgxeEd1cEU3eUFBeWd2eUd2RWN4bElHeVVUM1VETFZEdWFnM0dvUkdvZ3ZRWkhReG1vOFdvSnZRY3JRYVBZdzJvZWZRcTJnUDJvOCtROGN3d09nWUJ6UEViREF1eHNOQ3NUZ3NDWk5qeTdFaXJBeXJ4aHF3VnF3RHU0bjFZOCt4ZHdRU2dVWEFDVFlFZDBJZ1lSNUJTRmhNV0U3WVNLZ2dIQ1EwRWRvSk53a0RoRkhDSnlLVHFFdTBKcm9SK2NRWVlqSXhoMWhJTENQV0VvOFRMeEI3aUVQRU55UVNpVU15SjdtUUFrbXhwRlRTRXRKRzBtNVNJK2tzcVpzMFNCb2prOG5hWkd1eUJ6bVVMQ0FyeUlYa25lVEQ1RFBrRytRaDhsc0tuV0pBY2FUNFUrSW9Vc3BxU2hubEVPVTA1UVpsbURKQlZhT2FVdDJvb1ZRUk5ZOWFRcTJodGxLdlVZZW9FelIxbWpuTmd4WkpTNld0b3BYVEdtZ1hhUGRwcitoMHVoSGRsUjVPbDlCWDBzdnBSK2lYNkFQMGR3d05oaFdEeDRobktCbWJHQWNZWnhsM0dLK1lUS1laMDRzWngxUXdOekhybU9lWkQ1bHZWVmdxdGlwOEZaSEtDcFZLbFNhVkd5b3ZWS21xcHFyZXFndFY4MVhMVkkrcFhsTjlya1pWTTFQanFRblVscXRWcXAxUTYxTWJVMmVwTzZpSHFtZW9iMVEvcEg1Wi9Za0dXY05NdzA5RHBGR2dzVi9qdk1ZZ0MyTVpzM2dzSVdzTnE0WjFnVFhFSnJITjJYeDJLcnVZL1IyN2l6MnFxYUU1UXpOS00xZXpVdk9VWmo4SDQ1aHgrSngwVGdubktLZVg4MzZLM2hUdktlSXBHNlkwVExreFpWeHJxcGFYbGxpclNLdFJxMGZydlRhdTdhZWRwcjFGdTFuN2dRNUJ4MG9uWENkSFo0L09CWjNuVTlsVDNhY0tweFpOUFRyMXJpNnFhNlVib2J0RWQ3OXVwKzZZbnI1ZWdKNU1iNmZlZWIzbitoeDlMLzFVL1czNnAvVkhERmdHc3d3a0J0c016aGc4eFRWeGJ6d2RMOGZiOFZGRFhjTkFRNlZobFdHWDRZU1J1ZEU4bzlWR2pVWVBqR25HWE9NazQyM0diY2FqSmdZbUlTWkxUZXBON3BwU1RibW1LYVk3VER0TXg4M016YUxOMXBrMW16MHgxekxubStlYjE1dmZ0MkJhZUZvc3RxaTJ1R1ZKc3VSYXBsbnV0cnh1aFZvNVdhVllWVnBkczBhdG5hMGwxcnV0dTZjUnA3bE9rMDZybnRabnc3RHh0c20ycWJjWnNPWFlCdHV1dG0yMmZXRm5ZaGRudDhXdXcrNlR2Wk45dW4yTi9UMEhEWWZaRHFzZFdoMStjN1J5RkRwV090NmF6cHp1UDMzRjlKYnBMMmRZenhEUDJEUGp0aFBMS2NScG5WT2IwMGRuRjJlNWM0UHppSXVKUzRMTExwYytMcHNieHQzSXZlUktkUFZ4WGVGNjB2V2RtN09id3UybzI2L3VOdTVwN29mY244dzBueW1lV1ROejBNUElRK0JSNWRFL0M1K1ZNR3Zmckg1UFEwK0JaN1huSXk5akw1RlhyZGV3dDZWM3F2ZGg3eGMrOWo1eW4rTSs0enczM2pMZVdWL01OOEMzeUxmTFQ4TnZubCtGMzBOL0kvOWsvM3IvMFFDbmdDVUJad09KZ1VHQld3TDcrSHA4SWIrT1B6cmJaZmF5MmUxQmpLQzVRUlZCajRLdGd1WEJyU0ZveU95UXJTSDM1NWpPa2M1cERvVlFmdWpXMEFkaDVtR0x3MzRNSjRXSGhWZUdQNDV3aUZnYTBUR1hOWGZSM0VOejMwVDZSSlpFM3B0bk1VODVyeTFLTlNvK3FpNXFQTm8zdWpTNlA4WXVabG5NMVZpZFdFbHNTeHc1TGlxdU5tNXN2dC84N2ZPSDRwM2lDK043RjVndnlGMXdlYUhPd3ZTRnB4YXBMaElzT3BaQVRJaE9PSlR3UVJBcXFCYU1KZklUZHlXT0NubkNIY0puSWkvUk50R0kyRU5jS2g1TzhrZ3FUWHFTN0pHOE5Ya2t4VE9sTE9XNWhDZXBrTHhNRFV6ZG16cWVGcHAySUcweVBUcTlNWU9Ta1pCeFFxb2hUWk8yWitwbjVtWjJ5NnhsaGJMK3hXNkx0eThlbFFmSmE3T1FyQVZaTFFxMlFxYm9WRm9vMXlvSHNtZGxWMmEvelluS09aYXJuaXZON2N5enl0dVFONXp2bi8vdEVzSVM0WksycFlaTFZ5MGRXT2E5ckdvNXNqeHhlZHNLNHhVRks0WldCcXc4dUlxMkttM1ZUNnZ0VjVldWZyMG1lazFyZ1Y3QnlvTEJ0UUZyNnd0VkN1V0ZmZXZjMSsxZFQxZ3ZXZCsxWWZxR25ScytGWW1LcmhUYkY1Y1ZmOWdvM0hqbEc0ZHZ5citaM0pTMHFhdkV1V1RQWnRKbTZlYmVMWjViRHBhcWwrYVhEbTROMmRxMERkOVd0TzMxOWtYYkw1Zk5LTnU3ZzdaRHVhTy9QTGk4WmFmSnpzMDdQMVNrVlBSVStsUTI3dExkdFdIWCtHN1I3aHQ3dlBZMDdOWGJXN3ozL1Q3SnZ0dFZBVlZOMVdiVlpmdEorN1AzUDY2SnF1bjRsdnR0WGExT2JYSHR4d1BTQS8wSEl3NjIxN25VMVIzU1BWUlNqOVlyNjBjT3h4KysvcDN2ZHkwTk5nMVZqWnpHNGlOd1JIbms2ZmNKMy9jZURUcmFkb3g3ck9FSDB4OTJIV2NkTDJwQ212S2FScHRUbXZ0YllsdTZUOHcrMGRicTNucjhSOXNmRDV3MFBGbDVTdk5VeVduYTZZTFRrMmZ5ejR5ZGxaMTlmaTc1M0dEYm9yWjc1MlBPMzJvUGIrKzZFSFRoMGtYL2krYzd2RHZPWFBLNGRQS3kyK1VUVjdoWG1xODZYMjNxZE9vOC9wUFRUOGU3bkx1YXJybGNhN251ZXIyMWUyYjM2UnVlTjg3ZDlMMTU4UmIvMXRXZU9UM2R2Zk42Yi9mRjkvWGZGdDErY2lmOXpzdTcyWGNuN3EyOFQ3eGY5RUR0UWRsRDNZZlZQMXYrM05qdjNIOXF3SGVnODlIY1IvY0doWVBQL3BIMWp3OURCWStaajh1R0RZYnJuamcrT1RuaVAzTDk2ZnluUTg5a3p5YWVGLzZpL3N1dUZ4WXZmdmpWNjlmTzBaalJvWmZ5bDVPL2JYeWwvZXJBNnhtdjI4YkN4aDYreVhnek1WNzBWdnZ0d1hmY2R4M3ZvOThQVCtSOElIOG8vMmo1c2ZWVDBLZjdreG1Uay84RUE1anovR016TGRzQUFBQWdZMGhTVFFBQWVpVUFBSUNEQUFENS93QUFnT2tBQUhVd0FBRHFZQUFBT3BnQUFCZHZrbC9GUmdBQUFESkpSRUZVZU5waStQLy9Qd015WHIxNjlYOTBNUXdGYVdscC85RVZZaWlBWVdTRldCV2dLOFNwQUZraEFBQUEvLzhEQUNWN2VkVjlnbVVaQUFBQUFFbEZUa1N1UW1DQycpIG5vLXJlcGVhdH0uZ3JpZC1zb3J0LWRvd257YmFja2dyb3VuZDp1cmwoJ2RhdGE6aW1hZ2UvcG5nOyBiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFrQUFBQUZDQVlBQUFDWFU4WnJBQUFBQ1hCSVdYTUFBQTdEQUFBT3d3SEhiNmhrQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBRVZKUkVGVWVOcDB5c0VOd0RBTVFsR2MzZGlBR2J3Y0kzZzRla3JWVmcwU2w2OVh0ak16T0kwa2xxUWllUVNTYWdIQUg5d0FBSkRrdnUxMGQyem4yVjlvdzIrN0JnRDVFRUk5NFhwMDNRQUFBQUJKUlU1RXJrSmdnZz09Jykgbm8tcmVwZWF0fS5wcm9ncmVzc2JhcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnByb2dyZXNzYmFyYm9keXtjb2xvcjojZmZmO2hlaWdodDpjYWxjKDEwMCUgLSAycHgpO2xlZnQ6MXB4O3RleHQtYWxpZ246Y2VudGVyO3RvcDoxcHh9LmNvbnRleHRpdGVte2hlaWdodDoyNHB4O2xpbmUtaGVpZ2h0OjI0cHg7dGV4dC1pbmRlbnQ6MzRweH0uY29udGV4dGl0ZW1zZXBlcmF0b3J7aGVpZ2h0OjFweDtsZWZ0OjMxcHg7cmlnaHQ6OHB4fS5kaWFsb2didXR0b25zZWN0aW9ue2hlaWdodDo0OHB4O2xlZnQ6MDt0b3A6Y2FsYygxMDAlIC0gNDhweCk7d2lkdGg6MTAwJX0uaW1hZ2UzMntiYWNrZ3JvdW5kLXNpemU6MTAwJSAxMDAlO2hlaWdodDozMnB4O2xlZnQ6MjVweDt0b3A6MzJweDt3aWR0aDozMnB4fS5pbWFnZWVycm9ye2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FZQUFBQnplbnIwQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUFCRjBSVmgwVkdsMGJHVUFSWEp5YjNJN1JtRnBiRHZvZzEwREFBQUlUMGxFUVZSNFhxMlhlNHhjVlIzSFArZk9ZM2RtZG1aM1ozYTMyMjI3dE5CZGVSVUpMVlFJYVVCcUVmNVFxbUJpUUFtSzBSV0tJaFMwUkhsSWdOaUtmeWhFaXFtUHhFQXBLUVdVOTFLTHBkalN0RURwMnk3YjE3NDdzenZQK3pqM0hDY25lK05rQTFrSjNzbHZ2cmwzTXZmelBiL2YrWjE3aitEVEg5UDlSMytHbTAwTEZiWHhDV0JkRzUvVlFBQ3hBUEh1eWgrZjF4Q05YUk95eEJXV0lDWUU1Mm1sVWNyZm94VVZSN3B2bmlxWE4xMysyTm9QQUdWaUdpTmlHcmdBUXJ2dnVtTjVRMzMwd1dncTFaWG9Qb1A2MHpxd0lsR2liUmxBNHd5UG9SeUhTdjhKaXZzUFkyY25EbzlYeXZkZjh2Z1R6d0orWU9iVEdCQ0ExYnZpZTNObkpkTi9iWmpkc2JqcGtvWFV6Y2dneDhmeEp5YlEwc012RmtBcnJGZ0NMSXR3WXlQaGRCcDcrQlJqYjIybjBIZjgzVjBEZzkrK2FlUEdQa0FHMlpqT2dCbjFPN2ZkY25rNjFiQytkY25GelludXViZ0RKNnZnY1FBRDFkb29LRlVWUGFtK3VSWktOVkozMmp6eUI0OHk5TVkvYzMxajJSdVdQL1ZVTCtCTk5TRStEcjYxcCtlTGJTM05MN1ovNVV2UmtQQnhoMDRHdnRGb2hESjBBelltdEVZSEJueWo2S3JXeituRWo4VHBmK2J2M3BHVGc5ZGN1M0ZqWUVJUkFLZW0vWVViYit3NmZVYkwxczVycjg3b1lnNDVNWUdvc1J3QTBSakZaRU1IR1RCRzhIM01lVlhEeldsRXkwd08vMlZUZHNmUm81ZXQ2TzA5Q01qQVJIanE2RHRUeVhXdGwxNllVYm5SS2p3SENIUnRwK2xBVGZ3WHJwVVp2VEZrc2lETnVUTTBSTVJ4NmJqaWt2U0M1eXRQQWt0cnU4T3FIZjJXbTc5elhhdzFmWEdzc1I1M2JBVHR5V3A0SnV6eFBEdWVlWVdYVnE5ajk0di9RRmJzNERla2JiUDdiMi94d3BvL3MyM0RhOWo1QXRyelVaNDBrOVVkR2lDZXNFaTBaeFkvdmV5cTY0RHdKSk5hQTZHNENOMmJYbmcybFdQOWFOZERlU1p3Smdyc2ZPNE5Ldk0rVCt2UEgyVThQb09kbTNyeEtyWXhzbVBUbTR3bk8raDQ4SGU0WFl0NForT2JWUElGQXpmM3FHcjUwQUU2RmkrZ3VhNytIaUE2eVJZaWdLOWZkdlhTTTgvdGVubjJrdk54aGdjUjVpZU03bjVsRzA3M1FscStkajN0TFNrODZiUHYxNDhRUFhrSXRLYmNQcDhaMzcyVkdhMk5XS0V3K3gvL0xieTNsUXVXTGdUbGcxUlZrZFRQbXMyL3QrNW45OTREWDEyeGMvdXJnQmZNQWF0QmNHVWtFYUc0NXoxQ2pjMklrQldraHZ6UUdFdCs4MzBxSWtKell3TUlqYlh5WjN5NCttR2tyMmk3NlJiYTI5TzBaRkxHMEpJN2Y4U21wYytENTZKOGpla0tLU2tkUGt5aUpVbFRLTElNNkFXa0ZkUS9qTDRvaklmZC94SEZ2ZThqYzFtMDY1b1V0czJmUzkvYXg1alptZ1EwU2tHbXRZbHpWcTdpdEo3Ym1WbUZaNXFUcGkwVGRTRStXUE1yMnVkMzRuc1M1Ym5JWWhGN2NORE1xMmhZRWRGaUVSQ3E3UUpMKy9wek9HV2s1NEtqS1I0OFFEalJRRGpUUXZmaXM5bTdlUmZ2UGZJUTUvOTBGVVhiQnlDVFNaR3VCb0FHa2xYNHpnZnVJLy9oTHM2NzdBSzh3UUg4UWdIZnRVMTdnaURzT2VEcnJra0RJcGlOUWlxVm9sSkdPVDVZcHZaNGhUeGVzWUI5NGhobmRIVnk4TjF0N0xqL1BzNjg2eDdBQXEwSkR1VXIvdlh3QStSM2J1T2NDN3NwN2QxajFvR2dWYlZwVlFnN1Jhclhrd0UzeUlCUW5sK0ZsY3hrUVFzRUFvUXhZdnE2MU4rSHRtMnkyUUtqbzBWYWEwYXVNQnhLaFlxcGUrbG9QeFlHREpyQWdESGpsVXBJcVF5enRnVDR2cGQzS2s3R0N0WjFJUkFDb3lBNFBsckI3VjVFNnZvZm9nWDRXaHU0d1dzQWl6bTMzYzJoMWIva3lMN3R6SnVWTkFTVVJxT05nc0F1T2tqcEZRS3VGYXhJdHFNT09SVVBwWHg4NmFOOWlhcXFrcExCcklOMzVvVWtiK2loclQxTnVpbUIxb3FtZUlqR2VBUnQ3cTlJcDVOMDNYRVArcHpGSEJzc29xVEM5MzJVNTJOVUtVcEZsNHFVUjRMRUJSbFFSZGZkV1N5Rkw0N0VCVWdQYVFWbEVGUThXUENUbFpSMEdBT0hLanhTYmNPSERQemNhamRraXg0QXpla1VYL2pGdld4WmZwVXhyNE1ucDlLbTRQbThSOEYxZHdFK3RRWkczY29iemZud2lsUVVrTDZCS3dzc0JQRkVBM2J2Qzh6OTFzMlViRWtxRm1aL2RTSEt2cjNGMUhldmdMUHZYRVcrN05FUWkvTFJ1blVrVTNGODZTS1VSdXNnSUplekdYYnN6YlVHTk9Ddk9yaG55N3F6THVqTFJ6ZzlHUlBtRHloUVdMUzExWFBzdVEwQW5MNzg2K3hkODN0T2JkdkM3UFlrQ0RpeGRUUDd0T2JjSC9SdytJOGI2SDkyUFoyekduRkdoMEZwRE5teXlHVkw1UEorLzZQRC9ac0JXV3RBQWQ3Sml2MUkzWGpkMmxoRUliU2VYS2dWOXNnUU05dmFHWHh4STMzUFBFMGlVVWQ3SmtacFlBQUJkTFMxTWJ4OUt5Ky8vanJ4V0lRNUhWWDR5SWlaUXdhdXdkZUtFMk0reCt6U0dzQUc1TlMzM1RDUWVHemVndGM3a21wUkppbE0rckVFb0JHaE1QRzJGa0wxY1dTNWhETTZodEk2ZUY1UTM5SkNKQjR6VDhieXlLaHBaNkdGbVFOS2FRYXpIa2ZIMWZ0M2p4eFpCa3dBYnBBQmdqSUF6dTZKN0FwMDQwc2g0VFdub2lGRVNHQSswcUZ3ZkFDRVJreDlLMGRUR2hnRWdRR2lqV2xNcS9xS1hGRnljbHlNYnk5UDNBYVVBZmxKKzRJd1VIOTdhK2VWOCt2aVQ3VW52VWhqekNJVXNyQUFKWVJSRFViVjFHMUI4SzIxVWVsSmNpV2ZFem5MMisrV2J2eERmdVJsb0JUVWY2cUIybExFYmsxWFRVVHJuMnlOdTQxTk1ZaEdMU3hoMXVncHpuVXc0a2tSWmgxeHBDUmJoTUVDK1FPdTNmT24wc2dyUUJId3Buc3BKY2pFTmFuMFdZdkRUVTgwMXVuejAvV1NlRlJqaFN5aTFRQkJ5TEl3dFZNK2FLcXFjS1ZQeVlGVHBSQTVSMy93dGxmc2VjM083UVBLazNBK3ljRFVheUdnRG9pdlNIVjhvOTJLM0JVUDA1bUkrTVFqQ2lHZ0xxd00ySkVDcFFWbFQxQjBMQ3FTNDhlVXUzcHRhWGdEVUtxZDlSK3pMNWgyU3hhZU5CTDdaaXh6MFp4dzlNdHh3cGRhV3RSSExMclI0Q3AxeU5mWUpmeTNUMGozMWZYdXFSMUFwUWJzQi9EUHNqY01BWkdhQ05XOFU2cko4R3JDcndYL1AzZkgxc2Zza0hWTktLUC80MWI5UDdGZXRhMk5lekh4QUFBQUFFbEZUa1N1UW1DQycpIG5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6MTAwJSAxMDAlfS5pbWFnZWluZGV4e2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FZQUFBQnplbnIwQUFBQUlYUkZXSFJVYVhSc1pRQkViMk4xYldWdWRHRjBhVzl1TzBobGJIQTdVWFZsYzNScGIyN2drOHlZQUFBSmdrbEVRVlI0WHAxWEMzQlU1UlgrOXU3ZHplYTVMQXRKaUZxVVJ5QXpJQTAxMnByV0FYeFEyamdDOVRHMGRLU2pvMVdybmFudGFFZmJXbHFMVlFkOEYxc1ZLb1NHR2tOQVUwQVRlUXVCR1BKU3pDWW1JU0VKbTlkdU5ydlp4OTE3LzU3emIyN2NacGl4NDhtYzNMdi8vZi96ZmVkNWR5MzQrbktwcytKckdkbFIyUUJqMHFLQU1POE5NYkZpd2QxckMwMUF5MWNSTUs5dnZuTkdRRWg3ZkpGZ1FuNU9MTnkzN3R0UVFhSWJCdTVlVTNocGhpUUFwTDd5ejBPTGJmYlVOWXBWdWNraUxBNTZ0RVJZQ01Bd21nZ2dyT3RhVFdoc3RQTFhQLzloRTBQY2MwZVJJYkZJTUVXMjdqcUpTWG5yblRySkxGbEpUR0RyYXp1UDMvNzMzYWRieTk1dkZHY2FlMFN2TnlBR1I0S0VhN0RLKzk2TG82SzJvVnVVN2pzci9sWjZ3dlBDR3pYckFOajRQTnVaYXYrVnQ0OWpVdDdZZmZwUzRNb3pyK3liczdYMDVLbDkxWitKUGdJMWhVSGp1aUcwdUM1aW1rNVhWa1BvdEVaQ2UwZEY1UWZONHFWdFIyc2YvL08yK1lDTXRKS004ZUsySThuaE9EVVYzUHI4MWdNM1VaaEdtai92bndBVklocUxDOCtGZ05oZjN5L0tqdmVJWi9kNnhLYktWdkgyNGZPaTR1UUYwZmpGaUFnRVl5SkcrNWhrdzJkOTR1WHRSMGFlZXI1OEpVY2ptY1RtZnh3Q2kwSUsycHljYitYWjEvNnpmSnJMVlhYcmlnTFhvZ1c1SUcvUmN0NlAxMnZPbzZwcEdKN0JHQWJHQlJ5cEtYQTRVdUFkTTlCNk1ZdzlkUU40OGYwMjFIcUdFUnJYVURBdkc2dHZ1ZG8xYzJidXZpYzI3YnFSSFNNSXhwUTJKd25FNC9wa3NmMyt1Yks1NlJsWlpTWExDK3g1T1U2RW8zSDgrOFFGSEdnWmhyQ3FzS3BXUktNYWZLTkJlQWZITURBWVFDQXdEbzBNcXZSTXQxanhIaEY1cTdvVG84RW8zSzUwckY2NTJEN2RuVlA2d0tNdjVFc1NKTG9lVHlLZzY1T2hkenBuYnY5ZTBSeDN6c3hNaE1JYTNpU3ZMNHhxVU8ycUJCa2NEaUFueGNEYXBkbDRiRTArbnJpOUFHdUxac0psamNQbkQ0RktBYXJOaXA3aEdGN2UxdzQva1hCbU9iRGkrdnpwZVZmTWU4Tk14VzhmV21tWjJ0UFdqVnYyM25ubE4yYVYvblJ0RWFpNHNQUEllZlJUZU8wRURrWEFOeHpFNm10eXNIaU9lOHJFRUZBb2dNM3R3M1NtRzJucERtaHh5RWpsT1ZYY3Yyb2VwVXJGcm9vek9OZmF0bUh6eGcxbEFEUlNRMGttWUxPbFBuWERkWE5COVlPNnRoRjBEa2E0Z2FSWFkyTVJGT1NrWXRHYzZUQ0VqQ01xcXR0QWxROGhMTFFtc0dpZUc4WDUweEFLYXFCRkdkNE9ieGpIV3J3SVJ6UXN1MzQrVWxPZHZ6T2p3TGlLMlhLLzJiaGoyUXgzK3Z6WmwwMUhpRFlmT091RklCRE9qcVlaR0EvRlVMd29tKzFDVVlDK29TQ3E2bnB4NGVLWUJPTTZwaTdFOHFXWEVWaVVJa0RFYVoxbC8rbCtXdE14WTNvbWNuT3k1dDc3eXkzTHpmUlBSb0FtM01vRmM3S2w5MjI5b3hpTDZ0QUZPTytrT3BIUWtaVm1CNHVxV05EU09RS2J6WVpwbE44dkI3WUZxU2txZ1J0RVhDZE50RnlRd0Q5cEcwS0VDbnJoM0Z5a3BqbHY1b2duUjhDcVdLelhYcDQ3RGRUcnROa25EK29hZ2NjUzRCYlZpb3BqbmZBSG9qalZjaEZWNU5YVlZ6bVJUcVFNa1lDM3EwVHNpMkZ3UDhXSlJGeUxjMVNrclpZT3YweVgyNTBGUlZHTDJBL0dWczBJa09jTDNhNE0yYjg5QStNY1V1bUpZclVBdWdVS2NXM3FqZUNUM1o5S3pyRzRqdHUrZXlYUFdJcUVBdFdxb0g4b2hCM1ZIWFRHS3FObTZFS0NDZ05vN3gxRGpOWXkwbEtZYkw1WkE2cFpBM3BjejJKdkFwUmJUNWNQcnV3c21XL29Dbm1VQ0srRlFGSVVoL1JzNFdVWnlKNmVUdUJXcUFwUVh1M0IvdnFMWkRGRjdoZUdrQys1dU02cXcrOEx3NUFPS1R6NE1wT0xrTVhDbXhKREtZNW9XSU8zTDRCWU5NNmZ1UWk1TFdWWWFlNG4yc3VWaGhUMlhMR2c5R0FyS211OUVod0NCQ2prY05NNURaVEM4VUNVSXlYVG9mRzZPWGVTaXBBUEJJS2hxQXg5UnFxS1NEZ21TWXdIWTBTQWlMREc0bXhBN21uczlHUElOdzVQdHc4ZjFudGhzOXNZZ01BWk9DNEp4Q0l4aEFJUjZVUm11aW9MUEVRWVpHOE1DUkVxLzJPTlJXTWU3OURvZDJ5MkZNeklzbVBRVHhzSmNNZ2JvSmx2UjFxbUhWYktMWXNCQXhkSERUeTZ0WjRMVEtaQkVERGRraHF5YUtNUklodlZlSTFEanV5c0ZFblE1eHVqOVdnN20wbU9nQkdKaE9vNnVnYWhVdEY5YzU2TGk0Y1B5bHlHaWZXd040Z1JtdjNCMFFnaTQzRkVJcHIwVXRQakNGUEtvcFN1VURDQ2dEK0NFTzNSNkRtVE0vUkVTeGJNZGtwNy9WNGY3US9XQTlETkNMQVlmdDlBVFYxRHg4TkxsOHloYWVlQ1hlMlNBTERLRG1CanhGd25qWk5SSFZmbHBXSDlEd3I0TVhidWIwVjdUeEFXUlRGbkFoT1gweEc2Z04ybW9IQ0JXNmJnMDNNOThJOTRENXNFbElrVUdIdDJianpjMGRuZjRSM3d5ZUphc1RUeEdqWllEUjJDMUpCR0RWa1R2MXBmaUFWWHVuQjEva3c4ZVErL096UUpLT1NaaWIzY0FYUnVSZUVzYWJPN1p3QmQzWDFkSCt4OTRTTUE4V1FDekVieitmcWZxWGovTkZJZE5pd3J6TVVzdHoxQklDNVRJVWtJMmRjRzBsTlVPS2x0YmR4Vzhoa1M0RUxXQXBPUSsvTGNEdHhBdHVnV2g0ODF3amZVK3h5QUNHTW0xNEJnQXBXbEc4dGIyN3ZyMmp2NjVEUzdweVFmNlE0bFVkbUp3U0x6YUZFc2VIWjdIWWI5WVZhKzV6V09qaVNqYzk2WnBNT0tuNVVzZ0VMUEdwcmIwZFhWMi9qQjNzM2xBR0traGhrQi9QaitsOHdvUkxyYTZoOHBxempxQzRmQ3lFeXo0ZUhiQzlnTDJkT0dMbFd5YldvZnhsMlA3NWZhMkRZTUF3eHM3dEZ4dVRzVnY2Q3pXV2txK3Z1R1VQTlJ2YitqN2N3akFNWW53Zzh6QXZLUUdZV1RoM2Ewbk84OGQ5KzJYZFhhd0tBUHpuUTdIbHhUZ0Z1S2NxR3FETUw1WlRnTGVhWkloZUR3Q3dtc1dvR2JpL0p3LzlxRmNHYllaZDdMOXh6UnVqcWJIMnlvM2RNRUlNcVF0LzFra3pBSkpBeVNtRkU0VlBYcWgyMmZONnpmOGErYVVVOTdqM3dmTFA5V0hoNWJ2d1MzRmwrQitYazBocDBwUkNZT0d1SElkam1RVDZPWm4vRWUzc3NUc3JHNUE3dkxhd0x0bnJNYlRuNjA3YURwdldBeGRMQ29wTktySkluenhxTUhYeit3K0pxU2xlRnc2UFg4dWJPWFhIZHRBWEp6M2JoK2NiWlU4ZVdYb2VUZlVuS2h0M2NReDA0MG9yT3pwNm5EOC9FRDV4by9QQWNnUktxWklGd3JrN0ptL1Y4djlZT0V5YVdUWmkvNy9rTVAzYnJ1NmU1N0gzbE5iSHB4cjlpMXAxYThXMVV2anA3dWtGcE85NlVWcDhSZnRsU0tEUSsrTEVydS9HTjM4WTMzY2I1bmtXYVMya3k3SnM2cU81NENpMnFtd0JSQllpRXgwMEVhUDN6ZzFSMEEzcjJtZUYxUlYyZmVLcnNqb3hpQVExWHQrZUFCRlkrMUFTSWNEUWMvOWczM0hEeDdxdncwUjlFOHo3YW0va1FUakduR3JlU3VwK1VyZEtxOFYvYWtHVmRsZ3F3dFNhM0pvNXhCSnNCaUU2SFdUZUJWUC9wREFwaTl0MHhjQlhCd3o1OWd3ZjhubHFTcmtuUk5Gc09jcXFhVFVyOUMvZ3RXS2ptbytyWGlzZ0FBQUFCSlJVNUVya0pnZ2c9PScpIG5vLXJlcGVhdH0uaW1hZ2VpbmZve2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FZQUFBQnplbnIwQUFBQUMzUkZXSFJVYVhSc1pRQkpibVp2TzIwU0xZWUFBQWxhU1VSQlZIaGVqVmNKa0ZUVkZUMi8vKzlsbUtWdEJvWnhJSm9hOWdLQ1JFY1NxUkJBaFJDeEZPTkdBZ1ZWR3R4U21xcVl5bTRNaWNHdFJOd0N4b2lSUlZCazAxRlcyYmR4QWd5TUFqMDRLOFBRTTh6MDlEYmQvYmVYZTkvdmJydVVLcjFkZDk3djErL2RjKzY1OTczdVVZUVF5RGRGVWZBdDdYSUxCYjdCdm9iSEU2czIxOEhPUlJRUTJXZGJaR1lVekw5amdwSUQvbVlDY3Z6UGU1OEtDQm1QQnlnWkFnTE94Qy92blFnTlpKWnRZLzdzQ1pkUDA1RkUraXYvM1QzTzdTbVk3VkpkTnlsQzhkRkg0NFZDQUxaOWtnQ1NsbVhzU3NRaW14NS84SmFUREhIZlhWVjJKdXV2S2JOc3plR2NKSGp6dlZvNTVqdFpGbGg5YmRXQk8xOWZWM04yN1lkMTR0TzZOdEVlaW9xdW5qamgydXp5dWYxaVJCdzkwU3BXYnprdS9yWDZZUERGTjNiTkFlRG0vVm1sOC8yVnR3OGd4K3VOZFRXWEEzYzkvY3FXeW1XckR4L1pzdk56Y1lGQXM4YWdwbVVMdzdTRWJsZzBzdHZDb2preVdoc1JtN2FmRWkrdDJIZjA5LzlZTVJ5UVNydnlNWmF1Mkpzdng1R3ZncXZQTDl0NkU4blVjK3BNUndaVWlMUnVpdUQ1cVBqNFdJZFllNkJOUExzNUtCWnZPaXZlM3RNaU5odytMK3ErNkJIUnVDNTAzWlFrVDN4K1FiejgxdDZlSjU5ZlA0UFZ5Q2Z4d3I5M2c4MUZEbHFjWDIvWHM2OTlOUFdLUUtENjFtbWpBMk5IbG9PeVJYMUxMNWJ2YWtIMXlXNEV1M1IwOWduNENyencrYndJeFd5Y3ZaakV4dHBPTFAyd0FVZUQzVWowR1JnOXJBeTNULzllWU9EQThpMS9XcnptUms2TUlCaFR4c3dSTUUwcjEyeFBQTGQyYUdGUnlkcFpVMGQ3S2diNWtVeWJlUGZnZVd5dDc0WlFOYmc5R2xUTkJVVlZJRGdXYlhPcDVKcnptYVdvK0lDSXZMbXpDWkY0R3FXQlF0dytZNXluZittZzFRLzk1c1VSR1JLS1pabGcweHcyVms1NnYzL2dXeitxcWl3ZE5MQVlpYVNCRmJ0YjBXY0JicThHUVdDbUVMQU5nVEdEZlJnN3BCZ0ZiaFduV3FQWUg0ekk0d29pcGRGY1c3ZU9sN2VjdzBPM1ZNSmY0c08wRzBiMDcrdEx2Z0dBbGJELzhNZ01sa0RrbjJsMTBaTE5kMy8zcWl0WHo3dWpDdFJjV0xXM0JSMGtyNGN5YzJrS0lBQnFPTncwNmdxTXVjb1BBUUhWNVlLd0JSYTlld1llbndlMmFjT2loTks2alhUYVFJVmZ3d016aDFHcE5Lelo4Q2xPbjIxWThNS2lCV3NCR0V6RWxVL0E3UzU0Y3ZMRW9hRCtRVzFERDVxNlVvQWlRQTB1Q1ZIREl4NUxZbkRBQjRWZWJnTDNVam5PdHZUSVVwa0V6clUxREFFSUlldmJHRXBpZjMwSXlaU0JLVGNNUjBHQi95L1poZ1RybFQxeXYxMjBjc3FBMHNMaFZ3L3Vqd1F0M25vOEpDWG42aGdHQlRZRkRFa0MyRkhiSnNzV0pPQjN0cC9CMGsyZmt4SUtUSVBBV1FHYlJ5SEx4Zlp4VFFjUnNEQ2dmekhLQjVVTXZmK3hKVk16QktCbEZhQWJic2JJeWpLWmZVTjdCTEcwUlYydUVxQXRWVkFzQldESlZSZHFXeExZOGRKQkdDa1RMbEtodkt4WVpzOHZZVE1CQVpzSVdwWno1T0lFL3IrR1M1ZzRhaUJHRFMxSHNLSGxaZ0E3eWMyTUFweUFldjJROGl0QVo1MFdoK1ZHaXpQU0xabTVicHJPU0c3UjgvWERTdkhyTzhkZzJlT1Q4Y3g5MXlKS0hXOWFwdXdSMDVEbDRKSEp5RmoxamIxRXlFWnBhUW1SMXFveXlTczVCU2p6VWFXQklubCsyenI3U0Ftd25QS0l3Y2xlOW13aWtjU0QweXRST2NTZnZjdmgxbHpRVTBTQW16Q2J2UnlGQkJVMmNLNDlCcDNtaS9wNUlhQ00rRm9QV0taVlV0alBneFN4RGphSE9WdDVQK2c2TjVYSjlXVVZwS3dONTN0aE8zMEdHNDVabkxITW5wejd3TWcwcEhRTG9Vc0oyREloRjE5OHhma0UySlRNWFVDZ0p0SkpBNkVMVWVqYzJTdzlnM05nR1VERk9qcWUzTlUyTXhCZ1k3QWN1T0dRY1VqcEZ2cWlhU2hDU0ZVTW5zL2RPMENXQUcrSXhoTnBLWDFSZ1laVVVwY2srdUs2b3dDNzd0UlVkYW5vamFVQU9QVmxzM0xBdElaY3FwZlNrWWltNUZ4eG9TYkxreUFNaWhlRFk0SUpDSFk5clFkRGx5THlmQThvb1ZxeWRBUjRLUlJGdUN1QkZHVnNHRTVHcG0weHNLeXQ3YlNCa3pFVHBKR1ZTMUJUeG9ra1pjdVNvNnpFSzhtSHd6RVk2ZlE1QUhhK0FuWXFsYWh0Yk82Q3BpcTRabGlBbTRjM3lsc3VTYXk3UTNIMGRNVVE2MDBpMWFmVE90V0pJSnhhdTRSQUxKNUN0RGVGUkNRRmd3Z3pTVTZFU1l5KzJpL2pkWVRDU0NiangxZzBjcEVqMEJ2dTNGVjdvaEZlcnh0akt3UHdhSUROV1RuWjhtWmliaUFlN1VPUktoRHcremh6NmJHa2dhdEt2VWhTeGx3cVcwanl6Z2tnOTdoZG1EQ3lWSmJnczlOdDZPMEo3Y2tuSUpqQXhsV0w5alEyZFRTR09zUHcwb1pwMzNlK2htMTJKa0hPQVF6RHdLL3VIWjhCRjFCY0Nud2VGVThzL0lHOEhZWGNJOWZ5WGxtdWFST3VsREZiMnpyUjNIcWhlZnZtRno4QllESzJ4bjh5Ykl4d3VPUHBEUi9XdkQ3MzdoOWp5b1J5SEE5ZVFrZDNHckFWQ1FUWVVBUlFUL09WNVNVWVBLZ1liTTBYSXFqZTN5UTczUlljU21FU2ttQkZxUStUS1JZMzk1NzlkUWhmYW44T1FJb3h2L29MbDhrVXpWbTRaUHY4ZTIrOGJtQlpmMFRpT3Bhcyt3eXhQcjV5RmZCTEtNN2xZcGtPQU1nVlZZSHEwcHhMeTVtU0pTZ3UwUERZUFdQaEwvTGdWUDBYK09qalEzVWJWdjF4T29BSXVaNzdPdjc1QXk5aHpmSkh1UnplSDA2ZGQ4M0lNUk9yNzU4M0krQXQ4Q0VjUytPdDZnYTBkeVhoVWhTSHFoeHkvSjBla2NqeWpYdy9aRUEvelB2cE1BU0t2Ymg0c1FmcjF1L3VQVjIvLzdZVFJ6ZHlBeWJKN1Z3VGNxMHlwVEFPNzE1WjM5SjBldUdLTlR1TnpxNHcvSVVlUER4N05LWlhsVVBUT0h0dVRKdWRuNlhiMG9VY05SVzR1YW9DRDl3eGlqT1hkVisvY2EvUjNIVHFZUUkvQ1NETmtMZjlZckhJLzAzSXJMTzlrTnBkL2VxT2hqTW41cTU4WjFja2VLNU5TanYxMmdyOGJ1NTQzRHJwT3hoZVVZUXl2NWZBblhOZkZ2Qmh4T0FpL296WHlMVWFsYXp1VkNObHZpdDZMbmg4d2VGUFZtd0QwRWR1Q2phYm9aeTZ5eXp5ek9TRis3WXQzenJ1dWxremtzbkU4aEZEcng0LzhmclJLQzh2eFEzanlxUkx1dG52S0dUZnNBbTB0M2RoLzhFNk5EVzFuV3dNSG5yb2ROMk8wd0FTNUFZY2s2Y2taN1BuUG5PNWYwaVlYQ0Y1MlpTZlBQTElyWE9lYXIzLzBkZkU0cVdieFpxTlI4WDcxY2ZFdnBwRzZldnBlZldHSStLZlN6YUpCUSsvTEdiZC9iZldTVGN1ZkJUQWxlVEY1TzVzM0N6T3pMdWV6Q2tnUzVBMVFhYVFaY3RCYnU3Wit1cEtBTzlmTjJsT1ZYTlR4VXlQcjJnU0FKK21lVWF3RklhcE53QWltVTdHRDRXNzI3WWRQN0sraGxYTTd1ZFkyZGc1SE1iTTZqYnJucWVnS0FKZnRRL1cvam1ycXl0RDFwM25hdjVWemlBWk1EMGp0WlZ4elB6Wlh4MWd6bDdKakFMWXR2SHZVUER0VE1rYlhYbGp2akVKSVVmSGhQUnZzUDhEWWxSdi9mWTU3cWtBQUFBQVNVVk9SSzVDWUlJPScpIG5vLXJlcGVhdH0uaW1hZ2V3YXJuaW5ne2JhY2tncm91bmQ6dXJsKCdkYXRhOmltYWdlL3BuZzsgYmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FZQUFBQnplbnIwQUFBRW4wbEVRVlI0MnUyVWVVeFVWeFRHMjZaU3hHNUovMm5hdFBHUGlsQzJNbVVYQ2FWMnNXa2FHaGNzRmF1eWxSWUpZQ29TVUJBWVV3YkNVa1pBbkFKU2xyRERzQlJrR1JnWWdZNkFETEtEVWdqRE9zTytVNzdlKzlKYVZOQmFHVTBUYi9KTHZuem4zSGZPTzJmZVBBUGdpZkwwL0grUEtNTDh0ZnFMRm1jSnAwcURUVlVlZC8zbnhKRVdsM3F1K0tINzF6TWdta3U5eDFYODJSS082YTc2S0l1VjVla3VMRTkzZ21ycTBaakNxNGM2YWF2VVJaaTM5WXNpc0NRVE0vUlZoZUUzcm5rNzExbG5tOExmdmpwa2QyQnJoZ3VXSnlSWUhLNmtNRTIwWmppRHhFSVVPb1hpQUdQRDJsQ3o1Zm5oZWl3T0NyQTBJcUlRWFlFNXFRZ2t0bExrYjJ5bWtDYUNqbXVvVkhGTVczb0ZZVmdjcWNYQ2VBY0VKWHdLb3hkSUU3ZktPS2dPMnQzSmRkSitjZE5ITDJDYkJFcVNuYkE4M282RklSSGllTkV3TWo5RW9acnhGcVdWa0NRNWdlU0diK29VOHIwTkRJWG5UWmJuaHBzdzExZUllV2tGb3JoaE1EQTd5QkI5SVp6eDVucjVtT2tUZ09TdTVIbnBmN0FwVGZoYXFXNHQ4elZxNmI3Q3dlSm9JMmE3VXpIL2V4RnkweTlEejNRL2hXcnEwUmhwSWg5ZGhRRW9QMmZjemJYVGZPbVJSMS9rcGM5dWlMVWwzM3MvWmpwU0NFbVk3Y21HV0pnTGxzbVhGS3FwUjJOTXpoeHBwaUhPRHNYZStvLzJCNVhoeHRJcjhUSlltaDFvSkc5V2lPbVdlSWFadGlRTXRBdWhZL2dGaFdycS9SUHZTTWJNcldLUXUzOWt1ck0rL0Urck9QblpkdVhDSDk2WHRPZjZZVkhXaHNubVM1aVV4TnhtWVVnTWx0SG5GS3JYeHBqYzZZNVV0R2VmUmRFcHZadmhOdW92UC9Ub2MxMTEyYlVYRGpPam43b1JqOG5HQzNjdzMxK0pqei9kUjZHYWVuZlNkQkV6blZtb2k3UUIzNDBWOVZDclNISFUwaXR3MVYyYTZDd200OHlBdklhTmlXc2htS2dQdjgxTVZ3NTh2VHdvVksrTjBWeDZoK0FQZVNNUDVGbXJhVTdhZS83VktsejN2SzJjODcyTzVIcUNDK1lIYWpGYTdvN1JVbGVDRzhZRUhwQUp6MEF1OHNma2RSNzU0UlVRQ3NuYjhxaEhZelNIeVdYdWxMbERmcFdOcHN0TzREdS8xeHRxcGZyS0EwZWY2cURwTCtSWWt1STE1S0VCR0NuKzdoNWtsZDVvcmtpQTlkZjJzTGEycDVwNjYrYlNSc2JGWVJBR1dTTGRVU3ZtdnF1SVA2S3VtK21ndFRSYW40U3BwbmdNRjlpdkJ4bHpGSndkSGZBdWF5K0ZhdXB0bEUrYWNNZFlYUVN5SExSV0U0OXFmTEx1S2s1YXZLV1Vla3lqVVJ6alFIYWFqNkhDYnpISS8yWmRaRmNENGU5NUF0dDNHalA0blQ1QlBScGJuN3hqR0JWNG9vRm5qL1RqbW4zQmx1Kzhlcy9vRXcrcitaYWYyMHVLRjJDczBnZlNiT3VOSUErMGhidzVEZEVjRHdxakIvTnQ3MytIZnhTeTZ2TW84N0ZBc28wNjcrNVZQSjlpbzk3VFYvNFRwcG9UTVZiRmhqVHJFQVl5RG14TXBoVkd5azVUcUtiZUF4bktzOGROdmlkb0xWSnp5OW9HbE9Lc1ZFdHFRZzVnWEJ3SmVWMDRaRFhCa0lsK1pKRFhoakQrUkdNc0ppVy9ZS29sRGRQdDJaaHV5OEpVYXdZbWI2U1FMeUVCNDllaXdOd1ZjVEJhNFlPUlVnOE1GN3RpS044UjBwd2prR1phUXhqd0VXSVBxaGFSbWkrc2JXQ0x5NjQzekg3ZXY2TXQrYXVkcXdRb2lGWGV2aDNOZGdhdjY5ODlBYnFQYllRM0NXb0VEUVdoOWxjTmxmVStSMm9vRWJZcUVHVmFnNm4xOVB4OUFEeFIvZ1JxYWpWM0llVmVaQUFBQUFCSlJVNUVya0pnZ2c9PScpIG5vLXJlcGVhdH0ubWVzc2FnLWJveC1jb250ZW50e2hlaWdodDphdXRvO2xlZnQ6NjVweDtyaWdodDowO3dvcmQtd3JhcDpicmVhay13b3JkfS5zcGxpdHZlcnRpY2Fse2hlaWdodDoxMDAlfS5zcGxpdGhvcml6b250YWx7d2lkdGg6MTAwJX0uc3BsaXR0ZXJ2ZXJ0aWNhbHtoZWlnaHQ6MTAwJTt3aWR0aDoxMHB4fS5zcGxpdHRlcmhvcml6b250YWx7aGVpZ2h0OjEycHg7d2lkdGg6MTAwJX0uY29uc29sZS1ib2R5e2NvbG9yOiNmZmYhaW1wb3J0YW50O2hlaWdodDphdXRvO3dpZHRoOjEwMCU7d29yZC13cmFwOmJyZWFrLXdvcmR9LmNvbnNvbGUtcGFyYXstbW96LXVzZXItc2VsZWN0OnRleHQ7LW1zLXVzZXItc2VsZWN0OnRleHQ7LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0O21hcmdpbjo0cHggNXB4IDNweDt1c2VyLXNlbGVjdDp0ZXh0fS5jb25zb2xlLXBhcmE6OnNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjk5NikhaW1wb3J0YW50O2NvbG9yOiMwMDAhaW1wb3J0YW50fS5jb25zb2xlLXBhcmE6Oi1tb3otc2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuOTk2KSFpbXBvcnRhbnQ7Y29sb3I6IzAwMCFpbXBvcnRhbnR9LnRvb2wtdGlwLWhlYWRpbmd7Zm9udC13ZWlnaHQ6NzAwO21hcmdpbjo0cHh9LnRvb2wtdGlwLWJvZHl7bWFyZ2luOjRweH0uYWpheC1sb2FkaW5nLXNjcmVlbntiYWNrZ3JvdW5kOnVybCgnZGF0YTppbWFnZS9zdmcreG1sOyBiYXNlNjQsUEhOMlp5QmpiR0Z6Y3owaWJHUnpMWE53YVc1dVpYSWlJSGRwWkhSb1BTSXlNREJ3ZUNJZ0lHaGxhV2RvZEQwaU1qQXdjSGdpSUNCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhodGJHNXpPbmhzYVc1clBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1TDNoc2FXNXJJaUIyYVdWM1FtOTRQU0l3SURBZ01UQXdJREV3TUNJZ2NISmxjMlZ5ZG1WQmMzQmxZM1JTWVhScGJ6MGllRTFwWkZsTmFXUWlJSE4wZVd4bFBTSmlZV05yWjNKdmRXNWtPaUJ1YjI1bE95SStQR2NnZEhKaGJuTm1iM0p0UFNKeWIzUmhkR1VvTUNBMU1DQTFNQ2tpUGlBZ1BISmxZM1FnZUQwaU5EY2lJSGs5SWpJMElpQnllRDBpT1M0MElpQnllVDBpTkM0NElpQjNhV1IwYUQwaU5pSWdhR1ZwWjJoMFBTSXhNaUlnWm1sc2JEMGlJekF3TlRWaE5TSStJQ0FnSUR4aGJtbHRZWFJsSUdGMGRISnBZblYwWlU1aGJXVTlJbTl3WVdOcGRIa2lJSFpoYkhWbGN6MGlNVHN3SWlCMGFXMWxjejBpTURzeElpQmtkWEk5SWpGeklpQmlaV2RwYmowaUxUQXVPVEUyTmpZMk5qWTJOalkyTmpZMk5uTWlJSEpsY0dWaGRFTnZkVzUwUFNKcGJtUmxabWx1YVhSbElqNDhMMkZ1YVcxaGRHVStJQ0E4TDNKbFkzUStQQzluUGp4bklIUnlZVzV6Wm05eWJUMGljbTkwWVhSbEtETXdJRFV3SURVd0tTSStJQ0E4Y21WamRDQjRQU0kwTnlJZ2VUMGlNalFpSUhKNFBTSTVMalFpSUhKNVBTSTBMamdpSUhkcFpIUm9QU0kySWlCb1pXbG5hSFE5SWpFeUlpQm1hV3hzUFNJak1EQTFOV0UxSWo0Z0lDQWdQR0Z1YVcxaGRHVWdZWFIwY21saWRYUmxUbUZ0WlQwaWIzQmhZMmwwZVNJZ2RtRnNkV1Z6UFNJeE96QWlJSFJwYldWelBTSXdPekVpSUdSMWNqMGlNWE1pSUdKbFoybHVQU0l0TUM0NE16TXpNek16TXpNek16TXpNek0wY3lJZ2NtVndaV0YwUTI5MWJuUTlJbWx1WkdWbWFXNXBkR1VpUGp3dllXNXBiV0YwWlQ0Z0lEd3ZjbVZqZEQ0OEwyYytQR2NnZEhKaGJuTm1iM0p0UFNKeWIzUmhkR1VvTmpBZ05UQWdOVEFwSWo0Z0lEeHlaV04wSUhnOUlqUTNJaUI1UFNJeU5DSWdjbmc5SWprdU5DSWdjbms5SWpRdU9DSWdkMmxrZEdnOUlqWWlJR2hsYVdkb2REMGlNVElpSUdacGJHdzlJaU13TURVMVlUVWlQaUFnSUNBOFlXNXBiV0YwWlNCaGRIUnlhV0oxZEdWT1lXMWxQU0p2Y0dGamFYUjVJaUIyWVd4MVpYTTlJakU3TUNJZ2RHbHRaWE05SWpBN01TSWdaSFZ5UFNJeGN5SWdZbVZuYVc0OUlpMHdMamMxY3lJZ2NtVndaV0YwUTI5MWJuUTlJbWx1WkdWbWFXNXBkR1VpUGp3dllXNXBiV0YwWlQ0Z0lEd3ZjbVZqZEQ0OEwyYytQR2NnZEhKaGJuTm1iM0p0UFNKeWIzUmhkR1VvT1RBZ05UQWdOVEFwSWo0Z0lEeHlaV04wSUhnOUlqUTNJaUI1UFNJeU5DSWdjbmc5SWprdU5DSWdjbms5SWpRdU9DSWdkMmxrZEdnOUlqWWlJR2hsYVdkb2REMGlNVElpSUdacGJHdzlJaU13TURVMVlUVWlQaUFnSUNBOFlXNXBiV0YwWlNCaGRIUnlhV0oxZEdWT1lXMWxQU0p2Y0dGamFYUjVJaUIyWVd4MVpYTTlJakU3TUNJZ2RHbHRaWE05SWpBN01TSWdaSFZ5UFNJeGN5SWdZbVZuYVc0OUlpMHdMalkyTmpZMk5qWTJOalkyTmpZMk5qWnpJaUJ5WlhCbFlYUkRiM1Z1ZEQwaWFXNWtaV1pwYm1sMFpTSStQQzloYm1sdFlYUmxQaUFnUEM5eVpXTjBQand2Wno0OFp5QjBjbUZ1YzJadmNtMDlJbkp2ZEdGMFpTZ3hNakFnTlRBZ05UQXBJajRnSUR4eVpXTjBJSGc5SWpRM0lpQjVQU0l5TkNJZ2NuZzlJamt1TkNJZ2NuazlJalF1T0NJZ2QybGtkR2c5SWpZaUlHaGxhV2RvZEQwaU1USWlJR1pwYkd3OUlpTXdNRFUxWVRVaVBpQWdJQ0E4WVc1cGJXRjBaU0JoZEhSeWFXSjFkR1ZPWVcxbFBTSnZjR0ZqYVhSNUlpQjJZV3gxWlhNOUlqRTdNQ0lnZEdsdFpYTTlJakE3TVNJZ1pIVnlQU0l4Y3lJZ1ltVm5hVzQ5SWkwd0xqVTRNek16TXpNek16TXpNek16TXpSeklpQnlaWEJsWVhSRGIzVnVkRDBpYVc1a1pXWnBibWwwWlNJK1BDOWhibWx0WVhSbFBpQWdQQzl5WldOMFBqd3ZaejQ4WnlCMGNtRnVjMlp2Y20wOUluSnZkR0YwWlNneE5UQWdOVEFnTlRBcElqNGdJRHh5WldOMElIZzlJalEzSWlCNVBTSXlOQ0lnY25nOUlqa3VOQ0lnY25rOUlqUXVPQ0lnZDJsa2RHZzlJallpSUdobGFXZG9kRDBpTVRJaUlHWnBiR3c5SWlNd01EVTFZVFVpUGlBZ0lDQThZVzVwYldGMFpTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKdmNHRmphWFI1SWlCMllXeDFaWE05SWpFN01DSWdkR2x0WlhNOUlqQTdNU0lnWkhWeVBTSXhjeUlnWW1WbmFXNDlJaTB3TGpWeklpQnlaWEJsWVhSRGIzVnVkRDBpYVc1a1pXWnBibWwwWlNJK1BDOWhibWx0WVhSbFBpQWdQQzl5WldOMFBqd3ZaejQ4WnlCMGNtRnVjMlp2Y20wOUluSnZkR0YwWlNneE9EQWdOVEFnTlRBcElqNGdJRHh5WldOMElIZzlJalEzSWlCNVBTSXlOQ0lnY25nOUlqa3VOQ0lnY25rOUlqUXVPQ0lnZDJsa2RHZzlJallpSUdobGFXZG9kRDBpTVRJaUlHWnBiR3c5SWlNd01EVTFZVFVpUGlBZ0lDQThZVzVwYldGMFpTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKdmNHRmphWFI1SWlCMllXeDFaWE05SWpFN01DSWdkR2x0WlhNOUlqQTdNU0lnWkhWeVBTSXhjeUlnWW1WbmFXNDlJaTB3TGpReE5qWTJOalkyTmpZMk5qWTJOamR6SWlCeVpYQmxZWFJEYjNWdWREMGlhVzVrWldacGJtbDBaU0krUEM5aGJtbHRZWFJsUGlBZ1BDOXlaV04wUGp3dlp6NDhaeUIwY21GdWMyWnZjbTA5SW5KdmRHRjBaU2d5TVRBZ05UQWdOVEFwSWo0Z0lEeHlaV04wSUhnOUlqUTNJaUI1UFNJeU5DSWdjbmc5SWprdU5DSWdjbms5SWpRdU9DSWdkMmxrZEdnOUlqWWlJR2hsYVdkb2REMGlNVElpSUdacGJHdzlJaU13TURVMVlUVWlQaUFnSUNBOFlXNXBiV0YwWlNCaGRIUnlhV0oxZEdWT1lXMWxQU0p2Y0dGamFYUjVJaUIyWVd4MVpYTTlJakU3TUNJZ2RHbHRaWE05SWpBN01TSWdaSFZ5UFNJeGN5SWdZbVZuYVc0OUlpMHdMak16TXpNek16TXpNek16TXpNek16TnpJaUJ5WlhCbFlYUkRiM1Z1ZEQwaWFXNWtaV1pwYm1sMFpTSStQQzloYm1sdFlYUmxQaUFnUEM5eVpXTjBQand2Wno0OFp5QjBjbUZ1YzJadmNtMDlJbkp2ZEdGMFpTZ3lOREFnTlRBZ05UQXBJajRnSUR4eVpXTjBJSGc5SWpRM0lpQjVQU0l5TkNJZ2NuZzlJamt1TkNJZ2NuazlJalF1T0NJZ2QybGtkR2c5SWpZaUlHaGxhV2RvZEQwaU1USWlJR1pwYkd3OUlpTXdNRFUxWVRVaVBpQWdJQ0E4WVc1cGJXRjBaU0JoZEhSeWFXSjFkR1ZPWVcxbFBTSnZjR0ZqYVhSNUlpQjJZV3gxWlhNOUlqRTdNQ0lnZEdsdFpYTTlJakE3TVNJZ1pIVnlQU0l4Y3lJZ1ltVm5hVzQ5SWkwd0xqSTFjeUlnY21Wd1pXRjBRMjkxYm5ROUltbHVaR1ZtYVc1cGRHVWlQand2WVc1cGJXRjBaVDRnSUR3dmNtVmpkRDQ4TDJjK1BHY2dkSEpoYm5ObWIzSnRQU0p5YjNSaGRHVW9NamN3SURVd0lEVXdLU0krSUNBOGNtVmpkQ0I0UFNJME55SWdlVDBpTWpRaUlISjRQU0k1TGpRaUlISjVQU0kwTGpnaUlIZHBaSFJvUFNJMklpQm9aV2xuYUhROUlqRXlJaUJtYVd4c1BTSWpNREExTldFMUlqNGdJQ0FnUEdGdWFXMWhkR1VnWVhSMGNtbGlkWFJsVG1GdFpUMGliM0JoWTJsMGVTSWdkbUZzZFdWelBTSXhPekFpSUhScGJXVnpQU0l3T3pFaUlHUjFjajBpTVhNaUlHSmxaMmx1UFNJdE1DNHhOalkyTmpZMk5qWTJOalkyTmpZMk5uTWlJSEpsY0dWaGRFTnZkVzUwUFNKcGJtUmxabWx1YVhSbElqNDhMMkZ1YVcxaGRHVStJQ0E4TDNKbFkzUStQQzluUGp4bklIUnlZVzV6Wm05eWJUMGljbTkwWVhSbEtETXdNQ0ExTUNBMU1Da2lQaUFnUEhKbFkzUWdlRDBpTkRjaUlIazlJakkwSWlCeWVEMGlPUzQwSWlCeWVUMGlOQzQ0SWlCM2FXUjBhRDBpTmlJZ2FHVnBaMmgwUFNJeE1pSWdabWxzYkQwaUl6QXdOVFZoTlNJK0lDQWdJRHhoYm1sdFlYUmxJR0YwZEhKcFluVjBaVTVoYldVOUltOXdZV05wZEhraUlIWmhiSFZsY3owaU1Uc3dJaUIwYVcxbGN6MGlNRHN4SWlCa2RYSTlJakZ6SWlCaVpXZHBiajBpTFRBdU1EZ3pNek16TXpNek16TXpNek16TXpOeklpQnlaWEJsWVhSRGIzVnVkRDBpYVc1a1pXWnBibWwwWlNJK1BDOWhibWx0WVhSbFBpQWdQQzl5WldOMFBqd3ZaejQ4WnlCMGNtRnVjMlp2Y20wOUluSnZkR0YwWlNnek16QWdOVEFnTlRBcElqNGdJRHh5WldOMElIZzlJalEzSWlCNVBTSXlOQ0lnY25nOUlqa3VOQ0lnY25rOUlqUXVPQ0lnZDJsa2RHZzlJallpSUdobGFXZG9kRDBpTVRJaUlHWnBiR3c5SWlNd01EVTFZVFVpUGlBZ0lDQThZVzVwYldGMFpTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKdmNHRmphWFI1SWlCMllXeDFaWE05SWpFN01DSWdkR2x0WlhNOUlqQTdNU0lnWkhWeVBTSXhjeUlnWW1WbmFXNDlJakJ6SWlCeVpYQmxZWFJEYjNWdWREMGlhVzVrWldacGJtbDBaU0krUEM5aGJtbHRZWFJsUGlBZ1BDOXlaV04wUGp3dlp6NDhMM04yWno0PScpIGNlbnRlciBuby1yZXBlYXR9bWFya3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjA7Y29sb3I6IzAwMDtmb250LXdlaWdodDo3MDB9LmNvbnRyb2w6OnNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNDNUM1QzV9LmNvbnRyb2w6Oi1tb3otc2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I0M1QzVDNX0ucmliYm9uYnV0dG9uOmhvdmVyOm5vdCg6YWN0aXZlKTpub3QoLmRpc2FibGVkKXtmaWx0ZXI6YnJpZ2h0bmVzcyg5MCUpfS5yaWJib25idXR0b246YWN0aXZlOm5vdCguZGlzYWJsZWQpe2ZpbHRlcjpicmlnaHRuZXNzKDgwJSl9LnJpYmJvbmJ1dHRvbnNtYWxsOmhvdmVyOm5vdCg6YWN0aXZlKTpub3QoLmRpc2FibGVkKXtmaWx0ZXI6YnJpZ2h0bmVzcyg5MCUpfS5yaWJib25idXR0b25zbWFsbDphY3RpdmU6bm90KC5kaXNhYmxlZCl7ZmlsdGVyOmJyaWdodG5lc3MoODAlKX0uY2VsbHJvdy1zZWxlY3RlZDpob3ZlciwuY2VsbHJvdzpob3ZlciwuaGVhZGluZzpob3ZlciwuaW5wdXRjb250cm9sOmhvdmVyOm5vdCguZGlzYWJsZWQpOm5vdCgucG9wdXApLC5zaW1wbGVidXR0b246aG92ZXI6bm90KC5kaXNhYmxlZCl7ZmlsdGVyOmJyaWdodG5lc3MoOTAlKX0udGFiY29udHJvbHBhZ2VoZWFkZXItY2xvc2VidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojQ0NDO2JvcmRlcjoxcHggc29saWQgI0E2QTZBNjtjb2xvcjojMDAwfS5zaW1wbGVidXR0b246YWN0aXZlOm5vdCguZGlzYWJsZWQpe2JhY2tncm91bmQtY29sb3I6IzAwN2FjYztib3JkZXI6MXB4IHNvbGlkICMwMDdhY2M7Y29sb3I6I2ZmZn1Aa2V5ZnJhbWVzIENvbG9yRmxhc2h7ZnJvbXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9dG97YmFja2dyb3VuZC1jb2xvcjojMDA3YWNjfX0uZm9ybS1iYXNle2JvcmRlci1jb2xvcjojMDA3YWNjfS5mb3JtLWhlYWRpbmctYnV0dG9uOmhvdmVyOm5vdCguZm9ybS1oZWFkaW5nLWJ1dHRvbi1jbG9zZSl7YmFja2dyb3VuZC1jb2xvcjojMkE4QUQ0fS5mb3JtLWhlYWRpbmctYnV0dG9uOmFjdGl2ZTpub3QoLmZvcm0taGVhZGluZy1idXR0b24tY2xvc2Upe2JhY2tncm91bmQtY29sb3I6IzAxNUM5Rn0uZm9ybS1oZWFkaW5nLWJ1dHRvbi1jbG9zZTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNFODExMjN9LmZvcm0taGVhZGluZy1idXR0b24tY2xvc2U6YWN0aXZle2JhY2tncm91bmQtY29sb3I6I0YxNzA3QX0uY2VsbHJvd3tiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmNlbGxyb3c6YWN0aXZle2JhY2tncm91bmQtY29sb3I6I0FFQUVBRSFpbXBvcnRhbnR9LmV2ZW57YmFja2dyb3VuZC1jb2xvcjojZjZmN2Y5IWltcG9ydGFudH0uaGVhZGluZ3tiYWNrZ3JvdW5kLWNvbG9yOiNGMEYwRjA7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjQTZBNkE2IWltcG9ydGFudH0uaGVhZGluZzphY3RpdmV7ZmlsdGVyOmJyaWdodG5lc3MoODAlKX0uc3RhY2staXRlbS1hY3RpdmU6aG92ZXIsLnN0YWNrLWl0ZW06aG92ZXJ7ZmlsdGVyOmJyaWdodG5lc3MoOTAlKX0uaGVhZGluZy1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjojRjBGMEYwO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNBNkE2QTYhaW1wb3J0YW50fS5ncmlkLC5wcm9ncmVzc2JhcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjQTZBNkE2fS5wcm9ncmVzc2JhcmJvZHl7YmFja2dyb3VuZC1jb2xvcjojMDA3YWNjfS5jb250ZXh0bWVudXtib3gtc2hhZG93OjAgMCA2M3B4IC0xN3B4IHJnYmEoMCwwLDAsLjc1KTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjODA4NjhBfS5jb250ZXh0aXRlbTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNDRkNGQ0Z9LmNvbnRleHRpdGVtc2VwZXJhdG9ye2JhY2tncm91bmQtY29sb3I6I0I5QjlCOX0uZGlhbG9nYnV0dG9uc2VjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNGMEYwRjB9LnNwbGl0Y29udHJvbHtib3JkZXI6MXB4IHNvbGlkICNBNkE2QTZ9LnNwbGl0dGVydmVydGljYWx7Ym9yZGVyLWxlZnQ6MXB4ICNDM0MzQzMgc29saWQ7Ym9yZGVyLXJpZ2h0OjFweCAjQzNDM0MzIHNvbGlkfS5zcGxpdHRlcmhvcml6b250YWx7Ym9yZGVyLWJvdHRvbToxcHggI0MzQzNDMyBzb2xpZDtib3JkZXItdG9wOjFweCAjQzNDM0MzIHNvbGlkfS5wcmltYXJ5OmhvdmVyLC5zcGxpdHRlcmhvcml6b250YWw6aG92ZXIsLnNwbGl0dGVydmVydGljYWw6aG92ZXJ7ZmlsdGVyOmJyaWdodG5lc3MoOTAlKTtjdXJzb3I6cG9pbnRlcn0udG9vbC10aXB7aGVpZ2h0OmF1dG87d2lkdGg6YXV0bztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjODA4NjhBO3RleHQtc2hhZG93Oi4ycHggLjJweCByZ2JhKDAsMCwwLC41KX0uZm9ybS1oZWFkaW5nLW1pbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiMyQThBRDR9LnNpbXBsZWJ1dHRvbi1hY3RpdmV7Ym9yZGVyOjFweCBzb2xpZCAjNzc3fS5wcmltYXJ5e2JhY2tncm91bmQtY29sb3I6IzAwN2FjY30uc3RhY2staXRlbXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLWJvdHRvbToxcHggI0M1QzVDNSBzb2xpZH0uc3RhY2staXRlbS1hY3RpdmV7b3V0bGluZTojMDAwIGRvdHRlZCAxcHghaW1wb3J0YW50O291dGxpbmUtb2Zmc2V0Oi0xcHg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEsMTE1LDE5OSwuMykhaW1wb3J0YW50fS5jZWxscm93LXNlbGVjdGVkLC5mb2N1c2Vkcm93OmhvdmVye291dGxpbmU6IzkyYzBlMCBzb2xpZCAxcHghaW1wb3J0YW50fS5zdGFjay1pdGVtOmhvdmVye2N1cnNvcjpwb2ludGVyfS5wcmludC1ib2R5e2JhY2tncm91bmQ6I2NjY31wYWdlOmZpcnN0LWNoaWxke21hcmdpbi10b3A6LjVjbX1wYWdle2JhY2tncm91bmQ6I2ZmZjtkaXNwbGF5OmJsb2NrO21hcmdpbjowIGF1dG8gLjVjbTtib3gtc2hhZG93OjAgMCAuNWNtIHJnYmEoMCwwLDAsLjUpfS5wYWdlLWZvY3VzZWR7Ym94LXNoYWRvdzowIDAgMmNtIHJnYmEoNjMsNzIsMjA0LC44KX1wYWdlW3NpemU9QTRde3dpZHRoOjIxY207aGVpZ2h0OjI5LjdjbX1wYWdlW3NpemU9QTRdW2xheW91dD1MYW5kc2NhcGVde3dpZHRoOjI5LjdjbTtoZWlnaHQ6MjFjbX1wYWdlW3NpemU9QTNde3dpZHRoOjI5LjdjbTtoZWlnaHQ6NDJjbX1wYWdlW3NpemU9QTNdW2xheW91dD1MYW5kc2NhcGVde3dpZHRoOjQyY207aGVpZ2h0OjI5LjdjbX1wYWdlW3NpemU9QTVde3dpZHRoOjE0LjhjbTtoZWlnaHQ6MjFjbX1wYWdlW3NpemU9QTVdW2xheW91dD1MYW5kc2NhcGVde3dpZHRoOjIxY207aGVpZ2h0OjE0LjhjbX1AbWVkaWEgcHJpbnR7LnByaW50LWJvZHkscGFnZXttYXJnaW46MDtib3gtc2hhZG93OjB9fTpyb290ey0tcHJpbWFyeTojNGI4MmU1fS5ncmlke2JvcmRlcjoxcHggc29saWQgI2Q0ZDRkNCFpbXBvcnRhbnR9LmlucHV0Y29udHJvbCwuc2ltcGxlYnV0dG9ue2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjA7Ym9yZGVyLXJhZGl1czowfS5zaW1wbGVidXR0b24tYWN0aXZle2JhY2tncm91bmQtY29sb3I6IzkyYzBlMCFpbXBvcnRhbnQ7Y29sb3I6aW5pdGlhbCFpbXBvcnRhbnQ7ZmlsdGVyOnVuc2V0IWltcG9ydGFudH0udGFiY29udHJvbHBhZ2VoZWFkZXItYWN0aXZle2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6dGhpbjtsaW5lLWhlaWdodDoyMXB4O2hlaWdodDoyM3B4fS5wcmltYXJ5e2JhY2tncm91bmQtY29sb3I6dmFyKC0tcHJpbWFyeSkhaW1wb3J0YW50fS5mb3JtLWJhc2V7Ym9yZGVyLWNvbG9yOnZhcigtLXByaW1hcnkpfSp7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZH0ucmliYm9ucGFnZWhlYWRlci1hY3RpdmV7Y29sb3I6IzAwNzJjNjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ZmZjtib3JkZXItdG9wOjFweCBzb2xpZCAjZDRkNGQ0O2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjZDRkNGQ0O2JvcmRlci1yaWdodDoxcHggc29saWQgI2Q0ZDRkNDt6LWluZGV4OjF9LmNlbGxyb3ctc2VsZWN0ZWR7YmFja2dyb3VuZC1jb2xvcjojYjFkNmYwIWltcG9ydGFudH0uY2VsbHJvdzpob3ZlciwuZm9jdXNlZHJvdzpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNjZGU2ZjchaW1wb3J0YW50fS5yaWJib25wYWdlaGVhZGVyLWhpZGRlbntjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6aW5pdGlhbCFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2Q0ZDRkNDtib3JkZXItdG9wOjFweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDoxcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCB0cmFuc3BhcmVudH0ucmliYm9ucGFnZWhlYWRlci1oaWRkZW46aG92ZXJ7ZmlsdGVyOnVuc2V0IWltcG9ydGFudDtjb2xvcjojMDA3MmM2IWltcG9ydGFudH0uZm9ybS1oZWFkaW5nLWJ1dHRvbntjb2xvcjojYmZiZmJmfS5mb3JtLWhlYWRpbmctYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NkZTZmNyFpbXBvcnRhbnQ7Y29sb3I6IzJhOGRkNCFpbXBvcnRhbnR9LmZvcm0taGVhZGluZywucmliYm9uYnV0dG9uLC5yaWJib25jb250cm9sLC5yaWJib25ncm91cCwucmliYm9ucGFnZXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmZvcm0taGVhZGluZy10aXRsZXtjb2xvcjojYWVhZWFlfS5yaWJib25jb250cm9se2JvcmRlci1sZWZ0LWNvbG9yOiNmZmY7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmZ9LnJpYmJvbnBhZ2V7Ym9yZGVyLXRvcDoxcHggc29saWQgI2Q0ZDRkNH0ucmliYm9uYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NkZTZmNztmaWx0ZXI6dW5zZXQhaW1wb3J0YW50fS5yaWJib25idXR0b246YWN0aXZle2JhY2tncm91bmQtY29sb3I6IzkyYzBlMDtmaWx0ZXI6dW5zZXQhaW1wb3J0YW50fS5yaWJib25idXR0b25zbWFsbHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnJpYmJvbmJ1dHRvbnNtYWxsOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NkZTZmNztmaWx0ZXI6dW5zZXQhaW1wb3J0YW50fS5yaWJib25idXR0b25zbWFsbDphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojOTJjMGUwO2ZpbHRlcjp1bnNldCFpbXBvcnRhbnR9LnRhYmNvbnRyb2wsLnRhYmNvbnRyb2xwYWdlLC50YWJjb250cm9scGFnZWhlYWRlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnRhYmNvbnRyb2xwYWdlaGVhZGVyLWFjdGl2ZXtib3JkZXItY29sb3I6I2RjZGRkZCAjQzVDNUM1ICNmZmYhaW1wb3J0YW50O2NvbG9yOiMwMDcyYzZ9Lm1vYmlsZS10b29sLWJ1dHRvbjphY3RpdmUsLm1vYmlsZS10b29sLWJ1dHRvbjpmb2N1cywuc2ltcGxlYnV0dG9uOmFjdGl2ZXtjb2xvcjppbml0aWFsIWltcG9ydGFudH0udGFiY29udHJvbHBhZ2VoZWFkZXItaGlkZGVuOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NkZTZmNztmaWx0ZXI6dW5zZXQhaW1wb3J0YW50O2JvcmRlci1jb2xvcjojRjBGMEYwICNGMEYwRjAgI2NkZTZmNyFpbXBvcnRhbnR9LnRhYmNvbnRyb2xwYWdlaGVhZGVyLWhpZGRlbntib3JkZXItY29sb3I6I0YwRjBGMCAjRjBGMEYwICNmZmYhaW1wb3J0YW50fS50YWJoZWFkZXItY29udGFpbmVye2JvcmRlci1ib3R0b206MXB4ICNkY2RkZGQgc29saWQhaW1wb3J0YW50fS5zaW1wbGVidXR0b257YmFja2dyb3VuZC1jb2xvcjojZmZmfS5zaW1wbGVidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2RlNmY3O2ZpbHRlcjp1bnNldCFpbXBvcnRhbnR9LnNpbXBsZWJ1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojOTJjMGUwIWltcG9ydGFudDtmaWx0ZXI6dW5zZXQhaW1wb3J0YW50fS5mb3JtLWJvZHksLmlucHV0Y29udHJvbHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnNpbXBsZWJ1dHRvbjpmb2N1c3tvdXRsaW5lOjAhaW1wb3J0YW50fS5pbnB1dGNvbnRyb2w6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2RlNmY3IWltcG9ydGFudDtmaWx0ZXI6dW5zZXQhaW1wb3J0YW50fS5tb2JpbGUtdG9vbC1idXR0b257YmFja2dyb3VuZC1jb2xvcjojZWVlIWltcG9ydGFudDtib3JkZXItcmFkaXVzOjA7Ym9yZGVyOjB9Lm1vYmlsZS10b29sLWJ1dHRvbjphY3RpdmUsLm1vYmlsZS10b29sLWJ1dHRvbjpmb2N1cywubW9iaWxlLXRvb2wtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2U1ZTVlNSFpbXBvcnRhbnQ7ZmlsdGVyOnVuc2V0IWltcG9ydGFudDtib3JkZXI6MH0ubWVudS1pdGVte2JhY2tncm91bmQtY29sb3I6I2ZmZjtsaW5lLWhlaWdodDoyNHB4O3RleHQtYWxpZ246Y2VudGVyfS5tZW51LWl0ZW06aG92ZXJ7ZmlsdGVyOmJyaWdodG5lc3MoODAlKX0ubWVudS1pdGVtOmFjdGl2ZXtmaWx0ZXI6YnJpZ2h0bmVzcyg3MCUpfQ==";

        public static char DateSeperator = '/';

        public enum DatePosition
        {
            First,
            Second,
            Third
        }

        public static Vector2 ConsoleDefaultSize = new Vector2(540, 240);

        public static bool MessageFormBeep = false;

        public static int MaximumPixelScrollingRows = 500000;

        public static Action<string> OnSendError = null;

        public static bool IsChrome = Browser.IsChrome;

        public static bool AllowCloseWithoutQuestion = false;

        public static Action OnApplicationClose = null;

        public static bool ShowExceptionDialog = true;

        [Obsolete("No Longer is in the system! - remove self jquery...")]
        public static int FormFadeDuration = 100;

        private static int _dpi;
        private static bool _dpiSetup = false;

        public static float GetCmToPixel(int pixel)
        {
            var ppcm = GetPixelPerCm();            
            if(pixel == 0 || ppcm == 0)
                return 0;
            return pixel / ppcm;
        }

        public static int GetPixelPerCm()
        {
            if(_dpiSetup)
                return _dpi;

            var div = new Control();
            div.Top = "-1000cm";
            div.Left = "-1000cm";
            div.Height = "1000cm";
            div.Width = "1000cm";

            document.body.AppendChild(div);
            _dpi = (int)(((DOMRect)div.Content.getBoundingClientRect()).height / 1000.0d);
            document.body.removeChild((Node)div);
            _dpiSetup = true;
            return _dpi;            
        }
        
        /// <summary>
        /// Increase Render Speed
        /// </summary>
        public static bool RemoveAttributesOffElementsWhenLoseFocus;

        public static void Setup()
        {            
            SetupStyleDefaults();
        }

        public static void SetupStyleDefaults()
        {
            try
            {
                StyleSheetList sheets = document.styleSheets;
                for(uint i = 0; i < sheets.length; i++)
                {
                    var ownerNode = sheets[i].ownerNode as HTMLLinkElement;
                    if(ownerNode == null)
                        continue;
                    if(ownerNode.id.ToLower() == "expresscraft")
                    {
                        DefaultStyleSheet = sheets[i];
                    }
                    if(ownerNode.id.ToLower() == "expresscraftplugin")
                    {
                        PluginStyleSheet = sheets[i];
                    }
                    if(ownerNode.id.ToLower() == "resourcemanager")
                    {
                        resourceManangerSheets.Add(sheets[i]);
                    }
                }
                if(DefaultStyleSheet == null)
                    return;
                var df = GetExpressStyleRuleValue("font", ".control");
                if(df != null)
                    DefaultFont = df;
            }
            catch(Exception)
            {
            }
        }

        public static dynamic GetStyleRuleValue(List<StyleSheet> cssFile, string style, string className)
        {
            try
            {
                if(cssFile != null)
                {
                    foreach(var item in cssFile)
                    {
                        dynamic value = GetStyleRuleValue(item, style, className);
                        if(value != null)
                        {
                            return value;
                        }
                    }
                }
            }
            catch(Exception)
            {
            }
            return null;
        }

        public static dynamic GetStyleRuleValue(StyleSheet cssFile, string style, string className)
        {
            try
            {
                if(cssFile != null)
                {
                    dynamic pStyles = cssFile;
                    if(pStyles.cssRules)
                    {
                        for(int i = 0; i < pStyles.cssRules.length; i++)
                        {
                            dynamic rule = pStyles.cssRules[i];
                            if(rule.selectorText && rule.selectorText.split(',').indexOf(className) != -1)
                            {
                                return rule.style[style];
                            }
                        }
                    }
                }
            }
            catch(Exception)
            {
            }
            return null;
        }

        public static dynamic GetExpressStyleRuleValue(string style, string className)
        {
            dynamic value = GetStyleRuleValue(PluginStyleSheet, style, className);
            if(value == null)
            {
                value = GetStyleRuleValue(DefaultStyleSheet, style, className);
            }
            return value;
        }
            

        public static int ToolTipPopupDelayMs = 1000;
        public static int ToolTipPopupStayOpenDelayPerWordMs = 250;
    }
}